{"version":3,"sources":["webpack:///src/app/views/biznet/biznet-routing.module.ts","webpack:///src/app/views/biznet/biznet.module.ts","webpack:///src/app/views/biznet/employ-alerts/employ-alerts.component.ts","webpack:///src/app/views/biznet/employ-alerts/employ-alerts.component.html","webpack:///src/app/views/biznet/employ/employee.component.ts","webpack:///src/app/views/biznet/employ/employee.component.html","webpack:///src/app/views/biznet/employees/employees.component.ts","webpack:///src/app/views/biznet/employees/employees.component.html"],"names":["routes","path","canActivate","component","BiznetRoutingModule","forChild","imports","exports","BiznetModule","declarations","EmployAlertsComponent","service","authService","router","entityApi","settings","query","table","options","where","isFourFigure","order","displayedColumns","filtersColumns","price","createdDate","Date","title","subtitle","changes","loadChange","row","alert","accumulated","event","charCode","which","keyCode","filename","text","getText","element","document","createElement","setAttribute","encodeURIComponent","style","display","body","appendChild","click","removeChild","dataSource","data","obj","lottery","number","difference","rows","datestring","getDate","getMonth","getFullYear","numberOnly","onPageChange","onSortChange","onPaginatorChange","selector","templateUrl","EmployeeComponent","route","fb","changeDetectorRef","_snackBar","configFormGroup","entityId","settingCode","field","id","$ne","entityForm","code","required","takenValidator","name","lastName","iniEntity","params","subscribe","employeeId","entity","isActive","navigate","loadEmployees","toString","save","EmployeesComponent","showCardHeader"],"mappings":"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","file":"views-biznet-biznet-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport {AuthGuard} from '../../services/security/auth.guard';\nimport {EmployeeComponent} from './employ/employee.component';\nimport {EmployAlertsComponent} from \"./employ-alerts/employ-alerts.component\";\n\n\nconst routes: Routes = [\n  {\n    path: 'employee',\n    canActivate: [AuthGuard],\n    component: EmployeeComponent\n  },\n  {\n    path: 'employeealerts',\n    canActivate: [AuthGuard],\n    component: EmployAlertsComponent\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class BiznetRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { BiznetRoutingModule } from './biznet-routing.module';\nimport {DemoMaterialModule} from '../../demo-material-module';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\n\nimport { EmployeeComponent } from './employ/employee.component';\nimport { EmployeesComponent } from './employees/employees.component';\nimport { EmployAlertsComponent } from './employ-alerts/employ-alerts.component';\n\n\n@NgModule({\n  declarations: [EmployeeComponent, EmployeesComponent, EmployAlertsComponent],\n  imports: [\n    CommonModule,\n    BiznetRoutingModule,\n    DemoMaterialModule,\n    ReactiveFormsModule,\n    FormsModule\n  ]\n})\nexport class BiznetModule { }\n","import {Component, Input, OnChanges, OnInit} from '@angular/core';\nimport {BaseSearchView} from \"../../baseSearchView\";\nimport {MatTableDataSource} from \"@angular/material/table\";\nimport {ApiService} from \"../../../services/api.service\";\nimport {AuthService} from \"../../../services/security/auth.service\";\nimport {Router} from \"@angular/router\";\n\n@Component({\n  selector: 'app-employ-alerts',\n  templateUrl: './employ-alerts.component.html'\n})\nexport class EmployAlertsComponent extends BaseSearchView implements OnInit, OnChanges {\n\n  @Input() loadChange: any;\n\n  entityApi = 'bets';\n  settings: any = {\n    query: {\n      table: 'vw_betAlerts'\n    },\n    options: {\n      where: {\n        isFourFigure: true\n      },\n      order: [['accumulated', 'desc']]\n    }\n  };\n\n  title: any;\n  subtitle: any;\n\n  displayedColumns: string[] = ['lottery', 'number', 'accumulated', 'difference', 'createdDate', 'actions'];\n  filtersColumns: string[] = ['lottery'];\n  dataSource: MatTableDataSource<any>;\n  price = 5000;\n  createdDate = new Date();\n\n  constructor(private service: ApiService,\n              private authService: AuthService,\n              private router: Router) {\n    super();\n  }\n\n  ngOnInit(): void {\n\n    this.title = 'Empleados Alertas - [EN CONSTRUCCION]';\n    this.subtitle = 'Red De Trabajo';\n\n    super.init(this);\n    super.onPageChange();\n  }\n\n  ngOnChanges(changes: any): void {\n\n    if (this.loadChange) {\n      super.onPageChange();\n    }\n  }\n\n  onEdit(row: any) {\n\n    // this.router.navigate(['/employee', {employeeId: row.id}]);\n  }\n\n  validateAlert(row: any): boolean {\n\n    let alert = false;\n\n    if (row.accumulated > this.price) {\n      alert = true;\n    }\n\n    return  alert;\n  }\n\n  numberOnly(event): boolean {\n\n    const charCode = (event.which) ? event.which : event.keyCode;\n    if (charCode > 31 && (charCode < 48 || charCode > 57)) {\n      return false;\n    }\n\n    return true;\n\n  }\n\n  downloadFile() {\n\n    let filename = 'Numbers' + new Date();\n    let text = this.getText();\n\n    let element = document.createElement('a');\n    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n    element.setAttribute('download', filename);\n\n    element.style.display = 'none';\n    document.body.appendChild(element);\n\n    element.click();\n\n    document.body.removeChild(element);\n  }\n\n  getText(): string {\n\n    let text = '';\n\n    for (let obj of this.dataSource.data) {\n\n      if (obj.accumulated > this.price) {\n\n        text += obj.lottery + ' ' + obj.number + ' de ' + obj.difference + ' \\r\\n'\n      }\n    }\n\n    return text;\n  }\n\n  beforePrint(rows: any): any {\n\n    for (let row of rows) {\n\n      row.difference = row.accumulated - this.price;\n\n      if (row.difference < 1) {\n        row.difference = '';\n      }\n    }\n\n    return rows\n\n  }\n\n  // covered() {\n  //\n  //   let numbers = [];\n  //\n  //   for (let obj of this.dataSource.data) {\n  //\n  //     if (obj.accumulated > this.price) {\n  //\n  //       let numberFount = numbers.find((o: any) => o == obj.number);\n  //\n  //       if (!numberFount) {\n  //         numbers.push({number: obj.number, lotteryId:  obj.lotteryId});\n  //       }\n  //     }\n  //   }\n  //\n  //   if (numbers.length) {\n  //\n  //     if (confirm('¿Ya descargo el archivo de números?')) {\n  //\n  //       var datestring = this.createdDate.getDate() + \"/\" + (this.createdDate.getMonth() + 1) + \"/\" + this.createdDate.getFullYear();\n  //\n  //       this.service.save('details', {numbers: numbers, accumulated: this.price, createdDate: datestring})\n  //         .subscribe((urls) => {\n  //\n  //           this.onPageChange();\n  //\n  //         });\n  //     }\n  //   }\n  //\n  // }\n\n  beforePageChange(): void {\n\n    if (this.createdDate) {\n\n      var datestring = this.createdDate.getDate()  + \"/\" + (this.createdDate.getMonth()+1) + \"/\" + this.createdDate.getFullYear();\n      // + \" \" +         this.createdDate.getHours() + \":\" + this.createdDate.getMinutes();\n\n      this.settings.options.where.createdDate = datestring;\n    }\n    else {\n      delete this.settings.options.where.createdDate;\n    }\n  }\n}\n","<div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n  <!-- column -->\n  <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\n    <mat-card>\n      <mat-card-header>\n        <mat-card-title>\n          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n            <!-- column -->\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">\n              {{title}}\n            </div>\n          </div>\n        </mat-card-title>\n        <mat-card-subtitle>\n          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n            <!-- column -->\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">\n              {{subtitle}}\n            </div>\n          </div>\n        </mat-card-subtitle>\n      </mat-card-header>\n      <mat-card-content>\n        <div fxLayout=\"row\" fxLayoutWrap=\"wrap\" style=\"margin-text-outline: 10px;margin-top: 10px;\">\n          <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">\n            <mat-checkbox [(ngModel)]=\"settings.options.where.isFourFigure\"\n                          [ngModelOptions]=\"{standalone: true}\"\n                          style=\"margin-right: 10px;\">Cuatro Cifras</mat-checkbox>\n          </div>\n        </div>\n\n        <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n          <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">\n            <mat-form-field style=\"float: left;width: 30%; margin-right: 10px;\">\n              <!--                oninput=\"javascript: if (this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);\"-->\n              <input matInput\n                     type = \"number\"\n                     placeholder=\"Entre precio\"\n                     (keypress)=\"numberOnly($event)\"\n                     onKeyPress=\"if(this.value.length==9) return false;\"\n                     autocomplete=\"off\"\n                     [(ngModel)]=\"price\"\n              >\n            </mat-form-field>\n            <mat-form-field style=\"width: 30%; margin-right: 10px;\">\n              <mat-label>Seleccione fecha</mat-label>\n              <input matInput [matDatepicker]=\"picker\" [(ngModel)]=\"createdDate\">\n              <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n              <mat-datepicker #picker></mat-datepicker>\n            </mat-form-field>\n          </div>\n        </div>\n\n        <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n          <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" style=\"overflow: hidden;\">\n            <button mat-fab color=\"basic\"  (click)=\"onPageChange()\" style=\"float: left;\">Refrescar</button>\n<!--            <button mat-fab color=\"basic\"  (click)=\"downloadFile()\" style=\"float: left;\">Archivo</button>-->\n<!--            <button mat-fab color=\"warn\"  (click)=\"covered()\" style=\"float: right;\">Cubrir</button>-->\n\n          </div>\n        </div>\n        <!--        <a href=\"data:application/octet-stream;charset=utf-16le;base64,//5mAG8AbwAgAGIAYQByAAoA\">text file</a>-->\n        <!--        <a href=\"data:application/octet-stream,field1%2Cfield2%0Afoo%2Cbar%0Agoo%2Cgai%0A\">CSV Octet</a>-->\n        <!--        <a href=\"data:application/octet-stream,Medellin %2C 1234 %0A Medellin %2C 1235\">CSV Octet</a>-->\n        <!--        <a href=\"data:application/octet-stream,{{getFile()}}\">Create File</a>-->\n        <!--        <form onsubmit=\"downloadF('test', 'test')\">-->\n        <!--          <input type=\"text\" name=\"name\" value=\"test.txt\">-->\n        <!--          <textarea name=\"text\"></textarea>-->\n        <!--          <input type=\"submit\" value=\"Download\">-->\n        <!--        </form>-->\n\n        <!--        <button mat-fab color=\"basic\"  (click)=\"downloadF('test', 'test')\">Refresh</button>-->\n        <!--        <a [href]=\"getFile()\">Create File</a>-->\n\n        <table mat-table [dataSource]=\"dataSource\" matSort (matSortChange)=\"onSortChange($event)\" class=\"mat-elevation-z8\">\n\n          <!-- id Column -->\n          <ng-container matColumnDef=\"id\">\n            <th mat-header-cell *matHeaderCellDef> Id </th>\n            <td mat-cell *matCellDef=\"let element\"> {{element.id}} </td>\n          </ng-container>\n\n          <ng-container [matColumnDef]=\"column\" *ngFor=\"let column of displayedColumns\">\n            <th mat-header-cell *matHeaderCellDef> {{column}} </th>\n            <td mat-cell *matCellDef=\"let element\">\n              <span>{{element[column]}}</span>\n              <!--              <button *ngIf=\"column === 'actions'\" mat-button (click)=\"onEdit(element)\"><mat-icon>launch</mat-icon></button>-->\n              <!--              <button *ngIf=\"column === 'actions'\" mat-button color=\"warn\" (click)=\"onDelete(element)\"><mat-icon>delete_outline</mat-icon></button>-->\n              <span *ngIf=\"column === 'actions' && validateAlert(element)\" class=\"material-icons\">notification_important</span>\n            </td>\n          </ng-container>\n\n          <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n          <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n        </table>\n        <mat-paginator [length]=\"length\" [pageSize]=\"pageSize\" [pageSizeOptions]=\"pageSizeOptions\"\n                       (page)=\"onPaginatorChange($event)\" showFirstLastButtons>\n        </mat-paginator>\n      </mat-card-content>\n    </mat-card>\n  </div>\n</div>\n\n","import {ChangeDetectorRef, Component, OnInit} from '@angular/core';\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\nimport {BaseEditView} from '../../baseEditView';\nimport {ApiService} from '../../../services/api.service';\nimport {AuthService} from '../../../services/security/auth.service';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {MatSnackBar} from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-employee',\n  templateUrl: './employee.component.html'\n})\nexport class EmployeeComponent extends BaseEditView implements OnInit {\n\n  entityApi = 'employees';\n  title: any;\n  subtitle: any;\n  entity: any;\n\n  entityForm: FormGroup;\n\n  loadEmployees: string;\n\n  constructor(private service: ApiService,\n              private authService: AuthService,\n              private route: ActivatedRoute,\n              private fb: FormBuilder,\n              private router: Router,\n              private changeDetectorRef: ChangeDetectorRef,\n              private _snackBar: MatSnackBar) {\n    super();\n  }\n\n  ngOnInit(): void {\n\n    this.title = 'Empleado'; //+ this.service.getUrl();\n    this.subtitle = 'Red de trabajo';\n\n    this.iniEntity();\n\n    super.init(this);\n\n    this.route.params.subscribe((params) => {\n\n      if (params && params.employeeId) {\n\n        this.configFormGroup(params.employeeId);\n\n        super.getEntity(params.employeeId).subscribe(() => {\n\n        });\n      }\n      else {\n        this.configFormGroup();\n      }\n    });\n\n  }\n\n  configFormGroup = (entityId?:any) => {\n\n    let settingCode: any = {field: 'code'}\n\n    if (entityId) {\n\n      settingCode.options = {\n        where: {\n          id: { $ne: entityId }\n        }\n      }\n    }\n\n    this.entityForm = new FormGroup({\n      code: new FormControl('', [Validators.required],\n        [this.service.takenValidator(this.entityApi, settingCode)]),\n      name: new FormControl('', [Validators.required]),\n      lastName: new FormControl('', [Validators.required])\n    });\n  }\n\n  iniEntity(): void {\n    this.entity = {\n      code: null,\n      name: null,\n      lastName: null,\n      isActive: true\n    };\n  }\n\n  new(): void {\n\n    this.iniEntity();\n\n    this.router.navigate(['/employee']);\n  }\n\n  afterSaved(): void {\n    this.loadEmployees = new Date().toString();\n  }\n\n}\n","<div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n  <!-- column -->\n  <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\n    <mat-card>\n      <mat-card-header>\n        <mat-card-title>\n          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n            <!-- column -->\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">\n              {{title}}\n            </div>\n          </div>\n        </mat-card-title>\n        <mat-card-subtitle>\n          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n            <!-- column -->\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">\n              {{subtitle}}\n            </div>\n          </div>\n        </mat-card-subtitle>\n      </mat-card-header>\n      <mat-card-content>\n        <form [formGroup]=\"entityForm\">\n          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">\n              <mat-form-field>\n                <input matInput placeholder=\"Entre Código\" formControlName=\"code\" [(ngModel)]=\"entity.code\" required>\n                <mat-error *ngIf=\"entityForm.invalid\">{{getErrorMessage('code')}}</mat-error>\n              </mat-form-field>\n            </div>\n          </div>\n          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">\n              <mat-form-field>\n                <input matInput placeholder=\"Entre Nombre\" formControlName=\"name\" [(ngModel)]=\"entity.name\" required>\n                <mat-error *ngIf=\"entityForm.invalid\">{{getErrorMessage('name')}}</mat-error>\n              </mat-form-field>\n            </div>\n          </div>\n          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">\n              <mat-form-field>\n                <input matInput placeholder=\"Entre Apellido\" formControlName=\"lastName\" [(ngModel)]=\"entity.lastName\" required>\n                <mat-error *ngIf=\"entityForm.invalid\">{{getErrorMessage('lastName')}}</mat-error>\n              </mat-form-field>\n            </div>\n          </div>\n          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\" style=\"margin-text-outline: 10px;margin-top: 10px;\">\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">\n              <mat-checkbox [(ngModel)]=\"entity.isActive\" [ngModelOptions]=\"{standalone: true}\"\n                            style=\"margin-right: 10px;\">Esta Activo</mat-checkbox>\n            </div>\n          </div>\n        </form>\n      </mat-card-content>\n      <mat-card-actions>\n        <button mat-fab color=\"accent\" [disabled]=\"!entityForm.valid\" (click)=\"save()\">Salvar</button>\n        <button mat-fab color=\"primary\" (click)=\"new()\">Nuevo</button>\n      </mat-card-actions>\n      <mat-card-footer>\n        <mat-tab-group>\n          <mat-tab>\n            <ng-template mat-tab-label>\n              <mat-icon>monetization_on</mat-icon>\n              Empleados\n            </ng-template>\n            <ng-template matTabContent>\n              <div>\n                <div>\n                  <app-employees [loadChange]=\"loadEmployees\" [showCardHeader]=\"false\"></app-employees>\n                </div>\n              </div>\n            </ng-template>\n          </mat-tab>\n        </mat-tab-group>\n      </mat-card-footer>\n    </mat-card>\n  </div>\n</div>\n\n","import {Component, Input, OnChanges, OnInit} from '@angular/core';\nimport {MatTableDataSource} from '@angular/material/table';\nimport {ApiService} from '../../../services/api.service';\nimport {AuthService} from '../../../services/security/auth.service';\nimport {Router} from '@angular/router';\nimport {BaseSearchView} from '../../baseSearchView';\n\n@Component({\n  selector: 'app-employees',\n  templateUrl: './employees.component.html'\n})\nexport class EmployeesComponent extends BaseSearchView implements OnInit, OnChanges {\n\n  @Input() loadChange: any;\n  @Input() showCardHeader: boolean = true;\n\n  entityApi = 'employees';\n  settings: any = {\n    options: {\n      order: [['name']]\n    }\n  };\n\n  title: any;\n  subtitle: any;\n\n  displayedColumns: string[] = ['code', 'name', 'isActive', 'actions'];\n  filtersColumns: string[] = ['name', 'code', 'lastName'];\n  dataSource: MatTableDataSource<any>;\n  filter: any;\n\n  constructor(private service: ApiService,\n              private authService: AuthService,\n              private router: Router) {\n    super();\n  }\n\n  ngOnInit(): void {\n\n    this.title = 'Empleados';\n    this.subtitle = 'Red de Trabajo';\n\n    super.init(this);\n    super.onPageChange();\n  }\n\n  ngOnChanges(changes: any): void {\n\n    if (this.loadChange) {\n      super.onPageChange();\n    }\n  }\n\n  onEdit(row: any) {\n\n    this.router.navigate(['/employee', { employeeId: row.id }]);\n  }\n\n}\n","<div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n  <!-- column -->\n  <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\n    <mat-card>\n      <mat-card-header *ngIf=\"showCardHeader\">\n        <mat-card-title>\n          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n            <!-- column -->\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">\n              {{title}}\n            </div>\n          </div>\n        </mat-card-title>\n        <mat-card-subtitle>\n          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n            <!-- column -->\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">\n              {{subtitle}}\n            </div>\n          </div>\n        </mat-card-subtitle>\n      </mat-card-header>\n      <mat-card-content>\n\n        <mat-form-field>\n          <input matInput (keyup.enter)=\"onPageChange()\" [(ngModel)]=\"filter\" placeholder=\"Filtrar\">\n        </mat-form-field>\n\n        <table mat-table [dataSource]=\"dataSource\" matSort (matSortChange)=\"onSortChange($event)\" class=\"mat-elevation-z8\">\n\n          <!-- id Column -->\n          <ng-container matColumnDef=\"id\">\n            <th mat-header-cell *matHeaderCellDef> Id </th>\n            <td mat-cell *matCellDef=\"let element\"> {{element.id}} </td>\n          </ng-container>\n\n          <ng-container [matColumnDef]=\"column\" *ngFor=\"let column of displayedColumns\">\n            <th mat-header-cell *matHeaderCellDef> {{column}} </th>\n            <td mat-cell *matCellDef=\"let element\">\n              <span>{{element[column]}}</span>\n              <button *ngIf=\"column === 'actions'\" mat-button (click)=\"onEdit(element)\"><mat-icon>launch</mat-icon></button>\n              <button *ngIf=\"column === 'actions'\" mat-button color=\"warn\" (click)=\"onDelete(element)\"><mat-icon>delete_outline</mat-icon></button>\n            </td>\n          </ng-container>\n\n          <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n          <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n        </table>\n        <mat-paginator [length]=\"length\" [pageSize]=\"pageSize\" [pageSizeOptions]=\"pageSizeOptions\"\n                       (page)=\"onPaginatorChange($event)\" showFirstLastButtons>\n        </mat-paginator>\n      </mat-card-content>\n    </mat-card>\n  </div>\n</div>\n"]}