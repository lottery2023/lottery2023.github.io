{"version":3,"sources":["./src/app/views/security/menu/menu.component.ts","./src/app/views/security/menu/menu.component.html","./src/app/views/security/security-routing.module.ts","./src/app/views/security/security.module.ts","./src/app/views/security/user/user.component.ts","./src/app/views/security/user/user.component.html","./src/app/views/security/users/users.component.ts","./src/app/views/security/users/users.component.html"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmE;AACnB;AAC+B;AAK7B;AAC6B;AACvB;;;;;;;;;;;;;;;IC8D9C,mFACE;IACA,4EAAiC;IAAA,2EAAU;IAAA,uDAAe;IAAA,4DAAW;IAAA,4DAAS;IAC9E,uDACA;IAAA,kFAKe;IAJD,6SAAwB;IAItC,4DAAe;IACf,mFACE;IACA,oFACd;IACgB,wEACE;IAAA,uEAAM;IAAA,wDAAe;IAAA,4DAAO;IAC9B,4DAAI;IACN,4DAAgB;IAClB,4DAAe;IACjB,4DAAgB;;;;IAjB6B,0DAAe;IAAf,6EAAe;IAC1D,0DACA;IADA,yGACA;IACc,0DAAwB;IAAxB,kFAAwB;IAU1B,0DAAe;IAAf,6EAAe;;;;IAQ7B,mFACE;IAAA,6EACE;IAAA,2EAAU;IAAA,uDAAe;IAAA,4DAAW;IACtC,4DAAS;IAGT,mFAOe;IAND,6SAAwB;IAMtC,4DAAe;IAEf,2EAIE;IAAA,uDACF;IAAA,4DAAO;IAEP,6EAEE;IAAA,2EACE;IAAA,uDACF;IAAA,4DAAW;IACb,4DAAS;IACX,4DAAgB;;;;IA3B4B,0DAAyC;IAAzC,iGAAyC;IACvE,0DAAe;IAAf,6EAAe;IAKb,0DAAwB;IAAxB,kFAAwB;IAShC,0DAAyC;IAAzC,iGAAyC;IAG7C,0DACF;IADE,wFACF;IAGQ,0DAAyC;IAAzC,iGAAyC;IAE7C,0DACF;IADE,oJACF;;AD7Gd,iEAAiE;AAC1D,MAAM,gBAAgB;CAI5B;AAMM,MAAM,aAAc,SAAQ,0DAAY;IA2E7C,YAAoB,OAAmB,EACnB,WAAwB,EACxB,KAAqB,EACrB,EAAe,EACf,MAAc,EACd,iBAAoC,EACpC,SAAsB;QACxC,KAAK,EAAE,CAAC;QAPU,YAAO,GAAP,OAAO,CAAY;QACnB,gBAAW,GAAX,WAAW,CAAa;QACxB,UAAK,GAAL,KAAK,CAAgB;QACrB,OAAE,GAAF,EAAE,CAAa;QACf,WAAM,GAAN,MAAM,CAAQ;QACd,sBAAiB,GAAjB,iBAAiB,CAAmB;QACpC,cAAS,GAAT,SAAS,CAAa;QA/E1C,cAAS,GAAG,OAAO,CAAC;QASpB,UAAK,GAAG;YACN;gBACE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,UAAU;gBACjC,QAAQ,EAAE;oBACR,EAAE,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE,kBAAkB,EAAE,IAAI,EAAE,qBAAqB,EAAE,UAAU,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE;oBACxH,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,qBAAqB,EAAE;oBAC9D,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,gBAAgB,EAAE,IAAI,EAAE,qBAAqB,EAAE;oBACtE,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,qBAAqB,EAAE;oBAChE,EAAE,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE,kBAAkB,EAAE,IAAI,EAAE,qBAAqB,EAAE;iBAC9E;aACF;YACD;gBACE,IAAI,EAAE,kBAAkB,EAAE,IAAI,EAAE,OAAO;gBACvC,QAAQ,EAAE;oBACR,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,qBAAqB,EAAE;oBACpE,EAAE,KAAK,EAAE,SAAS,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,qBAAqB,EAAE;oBACnE,EAAE,KAAK,EAAE,gBAAgB,EAAE,IAAI,EAAE,mBAAmB,EAAE,IAAI,EAAE,qBAAqB,EAAE;iBACpF;aACF;YACD;gBACE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,cAAc;gBACtC,QAAQ,EAAE;oBACR,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,qBAAqB,EAAE;iBAChE;aACF;YACD;gBACE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM;gBAC9B,QAAQ,EAAE;oBACR,EAAE,KAAK,EAAE,eAAe,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,qBAAqB,EAAE;iBAC5E;aACF;YACD;gBACE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,eAAe;gBACxC,QAAQ,EAAE;oBACR,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,qBAAqB,EAAE;oBAC/D,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,qBAAqB,EAAE;iBAClE;aACF;SACF;QAEO,iBAAY,GAAG,CAAC,IAAS,EAAE,KAAa,EAAE,EAAE;YAClD,OAAO;gBACL,UAAU,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC;gBACvD,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,KAAK,EAAE,KAAK;aACb,CAAC;QACJ,CAAC,CAAC;QAEF,gBAAW,GAAG,IAAI,iEAAe,CAC/B,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAE/C,kBAAa,GAAG,IAAI,uEAAgB,CAClC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAEzF,eAAU,GAAG,IAAI,4EAAqB,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QAE7E,aAAQ,GAAG,CAAC,CAAS,EAAE,IAAS,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC;QAErD,kCAAkC;QAClC,uBAAkB,GAAG,IAAI,uEAAc,CAAM,IAAI,CAAC,cAAc,CAAC,CAAC;QAElE,UAAK,GAAG,IAAI,CAAC;QA2Cb,oBAAe,GAAG,CAAC,QAAa,EAAE,EAAE;YAElC,IAAI,OAAO,GAAQ,EAAC,KAAK,EAAE,MAAM,EAAC;YAElC,IAAI,QAAQ,EAAE;gBAEZ,OAAO,CAAC,OAAO,GAAG;oBAChB,KAAK,EAAE;wBACL,EAAE,EAAE,EAAE,GAAG,EAAE,QAAQ,EAAE;qBACtB;iBACF;aACF;YAED,IAAI,CAAC,UAAU,GAAG,IAAI,wDAAS,CAAC;YAC9B,mDAAmD;YACnD,6DAA6D;YAC7D,wDAAwD;YACxD,iDAAiD;YACjD,wDAAwD;YACxD,2DAA2D;aAC5D,CAAC,CAAC;QACL,CAAC;QAwBD,aAAQ,GAAG,CAAC,IAAsB,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC;IA/ElD,CAAC;IAED,QAAQ;QAEN,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,CAAC,0BAA0B;QAC/C,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC;QAE5B,IAAI,CAAC,SAAS,EAAE,CAAC;QAEjB,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEjB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,MAAM,EAAE,EAAE;YAErC,IAAI,MAAM,IAAI,MAAM,CAAC,MAAM,EAAE;gBAE3B,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;gBAEpC,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE;gBAE9C,CAAC,CAAC,CAAC;aACJ;iBACI;gBACH,IAAI,CAAC,eAAe,EAAE,CAAC;aACxB;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;QAElC,QAAQ,CAAC;QACT,6DAA6D;QAC7D,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC7D,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC7D,CAAC;IAyBD,SAAS;QACP,IAAI,CAAC,MAAM,GAAG;YACZ,UAAU,EAAE,IAAI;YAChB,IAAI,EAAE,IAAI;YACV,QAAQ,EAAE,IAAI;YACd,KAAK,EAAE,IAAI;YACX,QAAQ,EAAE,IAAI;YACd,YAAY,EAAE,KAAK;SACpB,CAAC;IACJ,CAAC;IAED,GAAG;QAED,IAAI,CAAC,SAAS,EAAE,CAAC;QAEjB,mCAAmC;IACrC,CAAC;IAED,UAAU;QACR,IAAI,CAAC,aAAa,GAAG,IAAI,IAAI,EAAE,CAAC,QAAQ,EAAE,CAAC;IAC7C,CAAC;IAID,4DAA4D;IAC5D,sBAAsB,CAAC,IAAsB;QAC3C,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAC1D,MAAM,eAAe,GAAG,WAAW,CAAC,MAAM,GAAG,CAAC,IAAI,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;YAC1E,OAAO,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QACH,OAAO,eAAe,CAAC;IACzB,CAAC;IAED,mDAAmD;IACnD,4BAA4B,CAAC,IAAsB;QACjD,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAC1D,MAAM,MAAM,GAAG,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;QACpF,OAAO,MAAM,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;IACtD,CAAC;IAED,gFAAgF;IAChF,uBAAuB,CAAC,IAAsB;QAC5C,QAAQ,CAAC;QACT,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACrC,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAC1D,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,IAAI,CAAC;YACtC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,GAAG,WAAW,CAAC;YAChD,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,GAAG,WAAW,CAAC,CAAC;QAErD,8BAA8B;QAC9B,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;QACxE,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAC;IACtC,CAAC;IAED,uFAAuF;IACvF,2BAA2B,CAAC,IAAS;QACnC,QAAQ,CAAC;QACT,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACrC,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAC;IACtC,CAAC;IAED,oEAAoE;IACpE,wBAAwB,CAAC,IAAsB;QAC7C,IAAI,MAAM,GAA4B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC/D,OAAO,MAAM,EAAE;YACb,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;YACpC,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;SACrC;IACH,CAAC;IAED,8DAA8D;IAC9D,sBAAsB,CAAC,IAAsB;QAC3C,MAAM,YAAY,GAAG,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC9D,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAC1D,MAAM,eAAe,GAAG,WAAW,CAAC,MAAM,GAAG,CAAC,IAAI,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;YAC1E,OAAO,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QACH,IAAI,YAAY,IAAI,CAAC,eAAe,EAAE;YACpC,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;SACxC;aAAM,IAAI,CAAC,YAAY,IAAI,eAAe,EAAE;YAC3C,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;SACtC;IACH,CAAC;IAED,mCAAmC;IACnC,aAAa,CAAC,IAAsB;QAClC,MAAM,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAEzC,IAAI,YAAY,GAAG,CAAC,EAAE;YACpB,OAAO,IAAI,CAAC;SACb;QAED,MAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAEhE,KAAK,IAAI,CAAC,GAAG,UAAU,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;YACpC,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YAElD,IAAI,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,GAAG,YAAY,EAAE;gBAC7C,OAAO,WAAW,CAAC;aACpB;SACF;QACD,OAAO,IAAI,CAAC;IACd,CAAC;;0EAlPU,aAAa;6FAAb,aAAa;QCtB1B,yEACE;QACA,yEACE;QAAA,2EACE;QAAA,kFACE;QAAA,iFACE;QAAA,yEACE;QACA,yEACE;QAAA,uDACF;QAAA,4DAAM;QACR,4DAAM;QACR,4DAAiB;QACjB,oFACE;QAAA,yEACE;QACA,0EACE;QAAA,wDACF;QAAA,4DAAM;QACR,4DAAM;QACR,4DAAoB;QACtB,4DAAkB;QAClB,oFACE;QAAA,sEA6CO;QACP,+EACE;QACA,gIACE;QAsBF,gIACE;QA4BJ,4DAAW;QACb,4DAAmB;QACnB,+EAGmB;QACnB,8EAiBkB;QACpB,4DAAW;QACb,4DAAM;QACR,4DAAM;;QA5IQ,0DACF;QADE,qFACF;QAOE,0DACF;QADE,wFACF;QAKE,0DAAwB;QAAxB,qFAAwB;QA8CpB,0DAAyB;QAAzB,sFAAyB;QAyBlB,0DAAyC;QAAzC,4FAAyC;;6FDxErD,aAAa;cAJzB,uDAAS;eAAC;gBACT,QAAQ,EAAE,UAAU;gBACpB,WAAW,EAAE,uBAAuB;aACrC;;;;;;;;;;;;;;AErBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyC;AACc;AACM;AACN;AACH;;;AAEpD,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,OAAO;QACb,WAAW,EAAE,CAAC,uEAAS,CAAC;QACxB,SAAS,EAAE,qEAAc;KAC1B;IACD;QACE,IAAI,EAAE,MAAM;QACZ,WAAW,EAAE,CAAC,uEAAS,CAAC;QACxB,SAAS,EAAE,kEAAa;KACzB;CACF,CAAC;AAMK,MAAM,qBAAqB;;oGAArB,qBAAqB;oKAArB,qBAAqB,kBAHvB,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAC9B,4DAAY;mIAEX,qBAAqB,uFAFtB,4DAAY;6FAEX,qBAAqB;cAJjC,sDAAQ;eAAC;gBACR,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;gBACxC,OAAO,EAAE,CAAC,4DAAY,CAAC;aACxB;;;;;;;;;;;;;;ACtBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyC;AACM;AACe;AAEI;AACT;AACO;AACV;AACA;;AAa/C,MAAM,cAAc;;6FAAd,cAAc;sJAAd,cAAc,kBARhB;YACP,4DAAY;YACZ,8EAAqB;YACrB,wEAAkB;YAClB,kEAAmB;YACnB,0DAAW;SACZ;mIAEU,cAAc,mBATV,qEAAc,EAAE,kEAAa,EAAE,kEAAa,aAEzD,4DAAY;QACZ,8EAAqB;QACrB,wEAAkB;QAClB,kEAAmB;QACnB,0DAAW;6FAGF,cAAc;cAV1B,sDAAQ;eAAC;gBACR,YAAY,EAAE,CAAC,qEAAc,EAAE,kEAAa,EAAE,kEAAa,CAAC;gBAC5D,OAAO,EAAE;oBACP,4DAAY;oBACZ,8EAAqB;oBACrB,wEAAkB;oBAClB,kEAAmB;oBACnB,0DAAW;iBACZ;aACF;;;;;;;;;;;;;;ACpBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmE;AACnB;AAC+B;;;;;;;;;;;;;;;;IC0B/D,4EAAsC;IAAA,uDAA2B;IAAA,4DAAY;;;IAAvC,0DAA2B;IAA3B,+FAA2B;;;IASjE,4EAAsC;IAAA,uDAA+B;IAAA,4DAAY;;;IAA3C,0DAA+B;IAA/B,mGAA+B;;;IAQrE,4EAAsC;IAAA,uDAA4B;IAAA,4DAAY;;;IAAxC,0DAA4B;IAA5B,gGAA4B;;;IAqBhE,iFACE;IAAA,uDACF;IAAA,4DAAa;;;IAF4B,kFAAsB;IAC7D,0DACF;IADE,0FACF;;;ADxDX,MAAM,aAAc,SAAQ,0DAAY;IAgB7C,YAAoB,OAAmB,EACnB,WAAwB,EACxB,KAAqB,EACrB,EAAe,EACf,MAAc,EACd,iBAAoC,EACpC,SAAsB;QACxC,KAAK,EAAE,CAAC;QAPU,YAAO,GAAP,OAAO,CAAY;QACnB,gBAAW,GAAX,WAAW,CAAa;QACxB,UAAK,GAAL,KAAK,CAAgB;QACrB,OAAE,GAAF,EAAE,CAAa;QACf,WAAM,GAAN,MAAM,CAAQ;QACd,sBAAiB,GAAjB,iBAAiB,CAAmB;QACpC,cAAS,GAAT,SAAS,CAAa;QApB1C,cAAS,GAAG,OAAO,CAAC;QACpB,mBAAc,GAAG,OAAO;QASxB,gBAAW,GAAG,KAAK,CAAC;QA+CpB,oBAAe,GAAG,CAAC,QAAa,EAAE,EAAE;YAElC,IAAI,OAAO,GAAQ,EAAC,KAAK,EAAE,MAAM,EAAC;YAElC,IAAI,QAAQ,EAAE;gBAEZ,OAAO,CAAC,OAAO,GAAG;oBAChB,KAAK,EAAE;wBACL,EAAE,EAAE,EAAE,GAAG,EAAE,QAAQ,EAAE;qBACtB;iBACF;aACF;YAED,IAAI,CAAC,UAAU,GAAG,IAAI,wDAAS,CAAC;gBAC9B,IAAI,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,EAC7C,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC;gBACzD,QAAQ,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;gBACpD,KAAK,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,KAAK,CAAC,CAAC;aAI/C,CAAC,CAAC;QACL,CAAC;IAzDD,CAAC;IAED,QAAQ;QAEN,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,CAAC,0BAA0B;QAC/C,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC;QAE5B,IAAI,CAAC,SAAS,EAAE,CAAC;QAEjB,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEjB,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,EAAE,EAAC,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,EAAC,KAAK,EAAC,CAAC,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,EAAC,EAAC,CAAC;aACzG,SAAS,CAAC,CAAC,GAAQ,EAAE,EAAE;YACtB,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;QACnB,CAAC,CAAC,CAAC;QAEL,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,MAAM,EAAE,EAAE;YAErC,IAAI,MAAM,IAAI,MAAM,CAAC,MAAM,EAAE;gBAE3B,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;gBAEpC,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,EAAE,EAAC,OAAO,EAAE,EAAC,OAAO,EAAE,CAAC,EAAC,WAAW,EAAE,OAAO,EAAC,CAAC,EAAC,EAAC,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE;oBAE5F,QAAQ,CAAC;oBACT,IAAI,CAAC,MAAM,CAAC;gBACd,CAAC,CAAC,CAAC;aACJ;iBACI;gBACH,IAAI,CAAC,eAAe,EAAE,CAAC;aACxB;QACH,CAAC,CAAC,CAAC;IAEL,CAAC;IA0BD,SAAS;QACP,IAAI,CAAC,MAAM,GAAG;YACZ,UAAU,EAAE,IAAI;YAChB,aAAa,EAAE,IAAI;YACnB,IAAI,EAAE,IAAI;YACV,QAAQ,EAAE,IAAI;YACd,KAAK,EAAE,IAAI;YACX,QAAQ,EAAE,IAAI;YACd,YAAY,EAAE,KAAK;SACpB,CAAC;IACJ,CAAC;IAED,GAAG;QAED,IAAI,CAAC,SAAS,EAAE,CAAC;QAEjB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;IAClC,CAAC;IAED,WAAW;QACT,IAAI,IAAI,GAAG,IAAI,CAAC;QAEhB,IAAI,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE;YAElB,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;gBACrB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;gBACrC,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;aAC7B;SACF;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAED,UAAU;QACR,8CAA8C;QAE9C,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACrB,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;SACtC;IACH,CAAC;IAED,UAAU;QACR,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;IAC1B,CAAC;;0EA9HU,aAAa;6FAAb,aAAa;QCZ1B,yEACE;QACA,yEACE;QAAA,2EACE;QAAA,kFACE;QAAA,iFACE;QAAA,yEACE;QACA,yEACE;QAAA,uDACF;QAAA,4DAAM;QACR,4DAAM;QACR,4DAAiB;QACjB,oFACE;QAAA,yEACE;QACA,0EACE;QAAA,wDACF;QAAA,4DAAM;QACR,4DAAM;QACR,4DAAoB;QACtB,4DAAkB;QAClB,oFACE;QAAA,2EACE;QAAA,0EACE;QAAA,0EACE;QAAA,kFACE;QAAA,4EACA;QADmE,uLAAyB;QAA5F,4DACA;QAAA,uHAAsC;QACxC,4DAAiB;QACnB,4DAAM;QACR,4DAAM;QACN,0EACE;QAAA,0EACE;QAAA,kFACE;QAAA,4EAEA;QADO,2LAA6B,+EAAW,gBAAY,IAAvB;QADpC,4DAEA;QAAA,uHAAsC;QACxC,4DAAiB;QACnB,4DAAM;QACR,4DAAM;QACN,0EACE;QAAA,0EACE;QAAA,kFACE;QAAA,4EACA;QADkE,wLAA0B;QAA5F,4DACA;QAAA,uHAAsC;QACxC,4DAAiB;QACnB,4DAAM;QACR,4DAAM;QACN,0EACE;QAAA,0EACE;QAAA,mFAC0C;QAD5B,kMAA6B;QACD,uEAAW;QAAA,4DAAe;QACtE,4DAAM;QACR,4DAAM;QACN,0EACE;QAAA,0EACE;QAAA,mFAC0C;QAD5B,sMAAiC;QACL,kFAAsB;QAAA,4DAAe;QACjF,4DAAM;QACR,4DAAM;QACN,0EACE;QAAA,0EACE;QAAA,kFACE;QAAA,6EAAW;QAAA,gFAAe;QAAA,4DAAY;QACtC,kFACE;QAD2B,qMAAkC;QAC7D,0HACE;QAEJ,4DAAa;QACf,4DAAiB;QACnB,4DAAM;QACR,4DAAM;QACR,4DAAO;QACT,4DAAmB;QACnB,oFACE;QAAA,8EAA+E;QAAjB,sIAAS,UAAM,IAAC;QAAC,kEAAM;QAAA,4DAAS;QAC9F,8EAAgD;QAAhB,sIAAS,SAAK,IAAC;QAAC,iEAAK;QAAA,4DAAS;QAChE,4DAAmB;QACnB,8EAiBkB;QACpB,4DAAW;QACb,4DAAM;QACR,4DAAM;;QA1FQ,0DACF;QADE,qFACF;QAOE,0DACF;QADE,wFACF;QAKE,0DAAwB;QAAxB,qFAAwB;QAI6C,0DAAyB;QAAzB,oFAAyB;QACjF,0DAA0B;QAA1B,wFAA0B;QAQ9B,0DAA6B;QAA7B,wFAA6B;QACzB,0DAA0B;QAA1B,wFAA0B;QAO6B,0DAA0B;QAA1B,qFAA0B;QACjF,0DAA0B;QAA1B,wFAA0B;QAMzB,0DAA6B;QAA7B,wFAA6B;QAM7B,0DAAiC;QAAjC,4FAAiC;QAQhB,0DAAkC;QAAlC,6FAAkC;QACjD,0DAA4B;QAA5B,8EAA4B;QAUnB,0DAA8B;QAA9B,2FAA8B;;6FDhExD,aAAa;cAJzB,uDAAS;eAAC;gBACT,QAAQ,EAAE,UAAU;gBACpB,WAAW,EAAE,uBAAuB;aACrC;;;;;;;;;;;;;;AEXD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkE;AACd;;;;;;;;;;;;;;;;ICG9C,kFACE;IAAA,iFACE;IAAA,yEACE;IACA,0EACE;IAAA,uDACF;IAAA,4DAAM;IACR,4DAAM;IACR,4DAAiB;IACjB,oFACE;IAAA,yEACE;IACA,0EACE;IAAA,uDACF;IAAA,4DAAM;IACR,4DAAM;IACR,4DAAoB;IACtB,4DAAkB;;;IAZV,0DACF;IADE,wFACF;IAOE,0DACF;IADE,2FACF;;;IA6BA,yEAAuC;IAAA,+DAAG;IAAA,4DAAK;;;IAC/C,yEAAwC;IAAA,uDAAe;IAAA,4DAAK;;;IAApB,0DAAe;IAAf,yFAAe;;;IAIvD,yEAAuC;IAAA,uDAAW;IAAA,4DAAK;;;IAAhB,0DAAW;IAAX,qFAAW;;;;IAGhD,6EAA0E;IAA1B,mbAAyB;IAAC,2EAAU;IAAA,iEAAM;IAAA,4DAAW;IAAA,4DAAS;;;;IAC9G,6EAAyF;IAA5B,qbAA2B;IAAC,2EAAU;IAAA,yEAAc;IAAA,4DAAW;IAAA,4DAAS;;;IAHvI,yEACE;IAAA,uEAAM;IAAA,uDAAmB;IAAA,4DAAO;IAChC,sIAA0E;IAC1E,sIAAyF;IAC3F,4DAAK;;;;IAHG,0DAAmB;IAAnB,uFAAmB;IACjB,0DAA4B;IAA5B,yFAA4B;IAC5B,0DAA4B;IAA5B,yFAA4B;;;IALxC,4EACE;IAAA,wHAAuC;IACvC,yHACE;IAIJ,qEAAe;;;IAPD,mFAAuB;;;IASrC,oEAA4D;;;IAC5D,oEAAkE;;ADlDrE,MAAM,cAAe,SAAQ,8DAAc;IAyBhD,YAAoB,OAAmB,EACnB,WAAwB,EACxB,MAAc;QAChC,KAAK,EAAE,CAAC;QAHU,YAAO,GAAP,OAAO,CAAY;QACnB,gBAAW,GAAX,WAAW,CAAa;QACxB,WAAM,GAAN,MAAM,CAAQ;QAxBzB,mBAAc,GAAY,IAAI,CAAC;QAExC,cAAS,GAAG,OAAO,CAAC;QACpB,aAAQ,GAAQ;YACd,OAAO,EAAE;gBACP,KAAK,EAAE,EACN;aACF;SACF,CAAC;QAKF,qBAAgB,GAAa,CAAC,MAAM,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC;QAC7D,mBAAc,GAAa,CAAC,MAAM,CAAC,CAAC;QAIpC,gBAAW,GAAG,IAAI,IAAI,EAAE,CAAC;IAQzB,CAAC;IAED,QAAQ;QAEN,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC;QACxB,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC;QAE5B,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjB,KAAK,CAAC,YAAY,EAAE,CAAC;IACvB,CAAC;IAED,WAAW,CAAC,OAAY;QAEtB,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,KAAK,CAAC,YAAY,EAAE,CAAC;SACtB;IACH,CAAC;IAED,MAAM,CAAC,GAAQ;QAEb,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,EAAE,EAAE,MAAM,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IACtD,CAAC;;4EAlDU,cAAc;8FAAd,cAAc;QCX3B,yEACE;QACA,yEACE;QAAA,2EACE;QAAA,kIACE;QAiBF,mFAEE;QAAA,yEACE;QAAA,yEACE;QAAA,oFACE;QAAA,2EACF;QADkB,iJAAe,kBAAc,IAAC;QAA9C,4DACF;QAAA,4DAAiB;QAOnB,4DAAM;QACR,4DAAM;QACN,yEACE;QAAA,0EACE;QAAA,6EAA6E;QAA9C,uIAAS,kBAAc,IAAC;QAAsB,qEAAS;QAAA,4DAAS;QACjG,4DAAM;QACR,4DAAM;QAEN,4EAEE;QAFiD,4JAAiB,wBAAoB,IAAC;QAGvF,4EACE;QAAA,0GAAuC;QACvC,2GAAwC;QAC1C,qEAAe;QAEf,+HACE;QAQF,2GAAuD;QACvD,2GAA6D;QAC/D,4DAAQ;QACR,qFAEgB;QADD,kJAAQ,6BAAyB,IAAC;QACjD,4DAAgB;QAClB,4DAAmB;QACrB,4DAAW;QACb,4DAAM;QACR,4DAAM;;QAjEiB,0DAAsB;QAAtB,oFAAsB;QAuBgB,0DAAoB;QAApB,+EAAoB;QAgBxD,0DAAyB;QAAzB,sFAAyB;QAQF,0DAAuC;QAAvC,yFAAuC;QAS1D,0DAAmC;QAAnC,iGAAmC;QAC1C,0DAAgD;QAAhD,kGAAgD;QAE/C,0DAAiB;QAAjB,8EAAiB;;6FDpD3B,cAAc;cAJ1B,uDAAS;eAAC;gBACT,QAAQ,EAAE,WAAW;gBACrB,WAAW,EAAE,wBAAwB;aACtC;;kBAGE,mDAAK;;kBACL,mDAAK","file":"views-security-security-module-es2015.js","sourcesContent":["import {ChangeDetectorRef, Component, OnInit} from '@angular/core';\nimport {BaseEditView} from \"../../baseEditView\";\nimport {FormBuilder, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {ApiService} from \"../../../services/api.service\";\nimport {AuthService} from \"../../../services/security/auth.service\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\nimport {FlatTreeControl} from \"@angular/cdk/tree\";\nimport {MatTreeFlatDataSource, MatTreeFlattener} from \"@angular/material/tree\";\nimport {SelectionModel} from \"@angular/cdk/collections\";\n\n/** Flat to-do item node with expandable and level information */\nexport class TodoItemFlatNode {\n  item: string;\n  level: number;\n  expandable: boolean;\n}\n\n@Component({\n  selector: 'app-menu',\n  templateUrl: './menu.component.html'\n})\nexport class MenuComponent extends BaseEditView implements OnInit {\n\n  entityApi = 'users';\n  title: any;\n  subtitle: any;\n  entity: any;\n\n  entityForm: FormGroup;\n\n  loadEmployees: string;\n\n  items = [\n    {\n      name: 'Apuesta', icon: 'business',\n      children: [\n        { state: 'betalerts', name: 'Apuestas alertas', icon: 'fiber_manual_record', expandable: false, level: 1, checks: true },\n        { state: 'bet', name: 'Apuesta', icon: 'fiber_manual_record' },\n        { state: 'bet2', name: 'Apuesta-PRUEBA', icon: 'fiber_manual_record' },\n        { state: 'bets', name: 'Buscador', icon: 'fiber_manual_record' },\n        { state: 'forbidden', name: 'Numero Prohibido', icon: 'fiber_manual_record' }\n      ]\n    },\n    {\n      name: 'Recursos Humanos', icon: 'group',\n      children: [\n        { state: 'employee', name: 'Empleado', icon: 'fiber_manual_record' },\n        { state: 'lottery', name: 'Loterias', icon: 'fiber_manual_record' },\n        { state: 'employeealerts', name: 'Empleados Alerta ', icon: 'fiber_manual_record' },\n      ]\n    },\n    {\n      name: 'Finanzas', icon: 'attach_money',\n      children: [\n        { state: 'sales', name: 'Ventas', icon: 'fiber_manual_record' },\n      ]\n    },\n    {\n      name: 'Análisis', icon: 'poll',\n      children: [\n        { state: 'employeesWork', name: 'Digitación', icon: 'fiber_manual_record' },\n      ]\n    },\n    {\n      name: 'Seguridad', icon: 'verified_user',\n      children: [\n        { state: 'user', name: 'Usuario', icon: 'fiber_manual_record' },\n        { state: 'users', name: 'Usuarios', icon: 'fiber_manual_record' }\n      ]\n    }\n  ]\n\n  private _transformer = (node: any, level: number) => {\n    return {\n      expandable: !!node.children && node.children.length > 0,\n      name: node.name,\n      state: node.state,\n      icon: node.icon,\n      level: level,\n    };\n  };\n\n  treeControl = new FlatTreeControl<any>(\n    node => node.level, node => node.expandable);\n\n  treeFlattener = new MatTreeFlattener(\n    this._transformer, node => node.level, node => node.expandable, node => node.children);\n\n  dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n  hasChild = (_: number, node: any) => node.expandable;\n\n  /** The selection for checklist */\n  checklistSelection = new SelectionModel<any>(true /* multiple */);\n\n  check = true;\n  constructor(private service: ApiService,\n              private authService: AuthService,\n              private route: ActivatedRoute,\n              private fb: FormBuilder,\n              private router: Router,\n              private changeDetectorRef: ChangeDetectorRef,\n              private _snackBar: MatSnackBar) {\n    super();\n  }\n\n  ngOnInit(): void {\n\n    this.title = 'Menu'; //+ this.service.getUrl();\n    this.subtitle = 'Seguridad';\n\n    this.iniEntity();\n\n    super.init(this);\n\n    this.route.params.subscribe((params) => {\n\n      if (params && params.userId) {\n\n        this.configFormGroup(params.userId);\n\n        super.getEntity(params.userId).subscribe(() => {\n\n        });\n      }\n      else {\n        this.configFormGroup();\n      }\n    });\n\n    this.dataSource.data = this.items;\n\n    debugger;\n    // this.checklistSelection.toggle(this.items[0].children[0]);\n    this.checklistSelection.isSelected(this.items[0].children[0])\n    this.todoLeafItemSelectionToggle(this.items[0].children[0])\n  }\n\n  configFormGroup = (entityId?:any) => {\n\n    let setting: any = {field: 'name'}\n\n    if (entityId) {\n\n      setting.options = {\n        where: {\n          id: { $ne: entityId }\n        }\n      }\n    }\n\n    this.entityForm = new FormGroup({\n      // name: new FormControl('', [Validators.required],\n      //   [this.service.takenValidator(this.entityApi, setting)]),\n      // password: new FormControl('', [Validators.required]),\n      // email: new FormControl('', [Validators.email])\n      // isActive: new FormControl('', [Validators.required]),\n      // isSuperAdmin: new FormControl('', [Validators.required])\n    });\n  }\n\n  iniEntity(): void {\n    this.entity = {\n      employeeId: null,\n      name: null,\n      password: null,\n      email: null,\n      isActive: true,\n      isSuperAdmin: false\n    };\n  }\n\n  new(): void {\n\n    this.iniEntity();\n\n    // this.router.navigate(['/user']);\n  }\n\n  afterSaved(): void {\n    this.loadEmployees = new Date().toString();\n  }\n\n  getLevel = (node: TodoItemFlatNode) => node.level;\n\n  /** Whether all the descendants of the node are selected. */\n  descendantsAllSelected(node: TodoItemFlatNode): boolean {\n    const descendants = this.treeControl.getDescendants(node);\n    const descAllSelected = descendants.length > 0 && descendants.every(child => {\n      return this.checklistSelection.isSelected(child);\n    });\n    return descAllSelected;\n  }\n\n  /** Whether part of the descendants are selected */\n  descendantsPartiallySelected(node: TodoItemFlatNode): boolean {\n    const descendants = this.treeControl.getDescendants(node);\n    const result = descendants.some(child => this.checklistSelection.isSelected(child));\n    return result && !this.descendantsAllSelected(node);\n  }\n\n  /** Toggle the to-do item selection. Select/deselect all the descendants node */\n  todoItemSelectionToggle(node: TodoItemFlatNode): void {\n    debugger;\n    this.checklistSelection.toggle(node);\n    const descendants = this.treeControl.getDescendants(node);\n    this.checklistSelection.isSelected(node)\n      ? this.checklistSelection.select(...descendants)\n      : this.checklistSelection.deselect(...descendants);\n\n    // Force update for the parent\n    descendants.forEach(child => this.checklistSelection.isSelected(child));\n    this.checkAllParentsSelection(node);\n  }\n\n  /** Toggle a leaf to-do item selection. Check all the parents to see if they changed */\n  todoLeafItemSelectionToggle(node: any): void {\n    debugger;\n    this.checklistSelection.toggle(node);\n    this.checkAllParentsSelection(node);\n  }\n\n  /* Checks all the parents when a leaf node is selected/unselected */\n  checkAllParentsSelection(node: TodoItemFlatNode): void {\n    let parent: TodoItemFlatNode | null = this.getParentNode(node);\n    while (parent) {\n      this.checkRootNodeSelection(parent);\n      parent = this.getParentNode(parent);\n    }\n  }\n\n  /** Check root node checked state and change it accordingly */\n  checkRootNodeSelection(node: TodoItemFlatNode): void {\n    const nodeSelected = this.checklistSelection.isSelected(node);\n    const descendants = this.treeControl.getDescendants(node);\n    const descAllSelected = descendants.length > 0 && descendants.every(child => {\n      return this.checklistSelection.isSelected(child);\n    });\n    if (nodeSelected && !descAllSelected) {\n      this.checklistSelection.deselect(node);\n    } else if (!nodeSelected && descAllSelected) {\n      this.checklistSelection.select(node);\n    }\n  }\n\n  /* Get the parent node of a node */\n  getParentNode(node: TodoItemFlatNode): TodoItemFlatNode | null {\n    const currentLevel = this.getLevel(node);\n\n    if (currentLevel < 1) {\n      return null;\n    }\n\n    const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;\n\n    for (let i = startIndex; i >= 0; i--) {\n      const currentNode = this.treeControl.dataNodes[i];\n\n      if (this.getLevel(currentNode) < currentLevel) {\n        return currentNode;\n      }\n    }\n    return null;\n  }\n\n}\n","<div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n  <!-- column -->\n  <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\n    <mat-card>\n      <mat-card-header>\n        <mat-card-title>\n          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n            <!-- column -->\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">\n              {{title}}\n            </div>\n          </div>\n        </mat-card-title>\n        <mat-card-subtitle>\n          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n            <!-- column -->\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">\n              {{subtitle}}\n            </div>\n          </div>\n        </mat-card-subtitle>\n      </mat-card-header>\n      <mat-card-content>\n        <form [formGroup]=\"entityForm\">\n<!--          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">-->\n<!--            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">-->\n<!--              <mat-form-field>-->\n<!--                <input matInput placeholder=\"Entre usuario\" formControlName=\"name\" [(ngModel)]=\"entity.name\" required>-->\n<!--                <mat-error *ngIf=\"entityForm.invalid\">{{getErrorMessage('name')}}</mat-error>-->\n<!--              </mat-form-field>-->\n<!--            </div>-->\n<!--          </div>-->\n<!--          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">-->\n<!--            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">-->\n<!--              <mat-form-field>-->\n<!--                <input matInput placeholder=\"Entre password\" formControlName=\"password\" [(ngModel)]=\"entity.password\" required>-->\n<!--                <mat-error *ngIf=\"entityForm.invalid\">{{getErrorMessage('password')}}</mat-error>-->\n<!--              </mat-form-field>-->\n<!--            </div>-->\n<!--          </div>-->\n<!--          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">-->\n<!--            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">-->\n<!--              <mat-form-field>-->\n<!--                <input matInput placeholder=\"Enter email\" formControlName=\"email\" [(ngModel)]=\"entity.email\">-->\n<!--                <mat-error *ngIf=\"entityForm.invalid\">{{getErrorMessage('email')}}</mat-error>-->\n<!--              </mat-form-field>-->\n<!--            </div>-->\n<!--          </div>-->\n          <!--          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">-->\n          <!--            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">-->\n          <!--              <mat-form-field>-->\n          <!--                <input matInput placeholder=\"Entre Apellido\" formControlName=\"lastName\" [(ngModel)]=\"entity.lastName\" required>-->\n          <!--                <mat-error *ngIf=\"entityForm.invalid\">{{getErrorMessage('lastName')}}</mat-error>-->\n          <!--              </mat-form-field>-->\n          <!--            </div>-->\n          <!--          </div>-->\n<!--          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\" style=\"margin-text-outline: 10px;margin-top: 10px;\">-->\n<!--            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">-->\n<!--              <mat-checkbox [(ngModel)]=\"entity.isActive\" [ngModelOptions]=\"{standalone: true}\"-->\n<!--                            style=\"margin-right: 10px;\">Esta Activo</mat-checkbox>-->\n<!--            </div>-->\n<!--          </div>-->\n<!--          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\" style=\"margin-text-outline: 10px;margin-top: 10px;\">-->\n<!--            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">-->\n<!--              <mat-checkbox [(ngModel)]=\"entity.isSuperAdmin\" [ngModelOptions]=\"{standalone: true}\"-->\n<!--                            style=\"margin-right: 10px;\">Es super administrador</mat-checkbox>-->\n<!--            </div>-->\n<!--          </div>-->\n        </form>\n        <mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n          <!-- This is the tree node template for leaf nodes -->\n          <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding>\n            <!-- use a disabled button to provide padding for tree leaf -->\n            <button mat-icon-button disabled><mat-icon>{{ node.icon }}</mat-icon></button>\n            {{node.name + node.checks}}\n            <mat-checkbox class=\"checklist-leaf-node\"\n                          [(ngModel)]=\"node.state\"\n                          [checked]=\"checklistSelection.isSelected(node)\"\n                          (change)=\"todoLeafItemSelectionToggle(node)\"\n            >\n            </mat-checkbox>\n            <mat-nav-list appAccordion>\n              <!--      <mat-list-item appAccordionLink routerLinkActive=\"selected\" group=\"{{node.state}}\">-->\n              <mat-list-item appAccordionLink>\n<!--                (click)=\"routerLink(node)\"-->\n                <a appAccordionToggle >\n                  <span>{{ node.name }}</span>\n                </a>\n              </mat-list-item>\n            </mat-nav-list>\n          </mat-tree-node>\n\n\n          <!-- This is the tree node template for expandable nodes -->\n          <mat-tree-node *matTreeNodeDef=\"let node;when: hasChild\" matTreeNodePadding>\n            <button mat-icon-button matTreeNodeToggle [attr.aria-label]=\"'toggle ' + node.name\">\n              <mat-icon>{{ node.icon }}</mat-icon>\n            </button>\n\n\n            <mat-checkbox class=\"checklist-leaf-node\"\n                          [(ngModel)]=\"node.state\"\n                          [checked]=\"descendantsAllSelected(node)\"\n                          [indeterminate]=\"descendantsPartiallySelected(node)\"\n                          (change)=\"todoItemSelectionToggle(node)\"\n            >\n<!--              {{node.item}}-->\n            </mat-checkbox>\n\n            <span mat-icon-button matTreeNodeToggle\n                  [attr.aria-label]=\"'toggle ' + node.name\"\n                  style=\"cursor: pointer\"\n            >\n              {{ node.name }}\n            </span>\n\n            <button mat-icon-button matTreeNodeToggle\n                    [attr.aria-label]=\"'toggle ' + node.name\">\n              <mat-icon>\n                {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n              </mat-icon>\n            </button>\n          </mat-tree-node>\n        </mat-tree>\n      </mat-card-content>\n      <mat-card-actions>\n        <!--        <button mat-fab color=\"accent\" [disabled]=\"!entityForm.valid\" (click)=\"save()\">Salvar</button>-->\n        <!--        <button mat-fab color=\"primary\" (click)=\"new()\">Nuevo</button>-->\n      </mat-card-actions>\n      <mat-card-footer>\n<!--        <mat-tab-group>-->\n<!--          <mat-tab>-->\n<!--            <ng-template mat-tab-label>-->\n<!--              <mat-icon>list</mat-icon>-->\n<!--              Menu-->\n<!--            </ng-template>-->\n<!--            <ng-template matTabContent>-->\n<!--              <div>-->\n<!--                <div>-->\n<!--                  &lt;!&ndash;                  <app-employees [loadChange]=\"loadEmployees\" [showCardHeader]=\"false\"></app-employees>&ndash;&gt;-->\n<!--                  <app-menu></app-menu>-->\n<!--                </div>-->\n<!--              </div>-->\n<!--            </ng-template>-->\n<!--          </mat-tab>-->\n<!--        </mat-tab-group>-->\n      </mat-card-footer>\n    </mat-card>\n  </div>\n</div>\n\n\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport {AuthGuard} from \"../../services/security/auth.guard\";\nimport {UsersComponent} from \"./users/users.component\";\nimport {UserComponent} from \"./user/user.component\";\n\nconst routes: Routes = [\n  {\n    path: 'users',\n    canActivate: [AuthGuard],\n    component: UsersComponent\n  },\n  {\n    path: 'user',\n    canActivate: [AuthGuard],\n    component: UserComponent\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class SecurityRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {DemoMaterialModule} from \"../../demo-material-module\";\n\nimport { SecurityRoutingModule } from './security-routing.module';\nimport { UsersComponent } from './users/users.component';\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport { UserComponent } from './user/user.component';\nimport { MenuComponent } from './menu/menu.component';\n\n\n@NgModule({\n  declarations: [UsersComponent, UserComponent, MenuComponent],\n  imports: [\n    CommonModule,\n    SecurityRoutingModule,\n    DemoMaterialModule,\n    ReactiveFormsModule,\n    FormsModule\n  ]\n})\nexport class SecurityModule { }\n","import {ChangeDetectorRef, Component, OnInit} from '@angular/core';\nimport {BaseEditView} from \"../../baseEditView\";\nimport {FormBuilder, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {ApiService} from \"../../../services/api.service\";\nimport {AuthService} from \"../../../services/security/auth.service\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\n\n@Component({\n  selector: 'app-user',\n  templateUrl: './user.component.html'\n})\nexport class UserComponent extends BaseEditView implements OnInit {\n\n  entityApi = 'users';\n  entityApiMenus = 'menus'\n  title: any;\n  subtitle: any;\n  entity: any;\n\n  entityForm: FormGroup;\n\n  loadEmployees: string;\n  currPass: string;\n  passChanged = false;\n\n  menus: any;\n\n  constructor(private service: ApiService,\n              private authService: AuthService,\n              private route: ActivatedRoute,\n              private fb: FormBuilder,\n              private router: Router,\n              private changeDetectorRef: ChangeDetectorRef,\n              private _snackBar: MatSnackBar) {\n    super();\n  }\n\n  ngOnInit(): void {\n\n    this.title = 'User'; //+ this.service.getUrl();\n    this.subtitle = 'Seguridad';\n\n    this.iniEntity();\n\n    super.init(this);\n\n    this.service.getSelect(this.entityApiMenus, {value: 'id', text: 'name', options: {order:[['name', 'asc']]}})\n      .subscribe((res: any) => {\n        this.menus = res;\n      });\n\n    this.route.params.subscribe((params) => {\n\n      if (params && params.userId) {\n\n        this.configFormGroup(params.userId);\n\n        super.getEntity(params.userId, {options: {include: [{association: 'menus'}]}}).subscribe(() => {\n\n          debugger;\n          this.entity;\n        });\n      }\n      else {\n        this.configFormGroup();\n      }\n    });\n\n  }\n\n  configFormGroup = (entityId?:any) => {\n\n    let setting: any = {field: 'name'}\n\n    if (entityId) {\n\n      setting.options = {\n        where: {\n          id: { $ne: entityId }\n        }\n      }\n    }\n\n    this.entityForm = new FormGroup({\n      name: new FormControl('', [Validators.required],\n        [this.service.takenValidator(this.entityApi, setting)]),\n      password: new FormControl('', [Validators.required]),\n      email: new FormControl('', [Validators.email]),\n      // isActive: new FormControl('', [Validators.required]),\n      // isSuperAdmin: new FormControl('', [Validators.required]),\n      // menuId: new FormControl('', [Validators.required])\n    });\n  }\n\n  iniEntity(): void {\n    this.entity = {\n      employeeId: null,\n      defaultMenuId: null,\n      name: null,\n      password: null,\n      email: null,\n      isActive: true,\n      isSuperAdmin: false,\n    };\n  }\n\n  new(): void {\n\n    this.iniEntity();\n\n    this.router.navigate(['/user']);\n  }\n\n  beforeSaved(): boolean {\n    let done = true;\n\n    if (this.entity.id) {\n\n      if (!this.passChanged) {\n        this.currPass = this.entity.password;\n        delete this.entity.password;\n      }\n    }\n\n    return done;\n  }\n\n  afterSaved(): void {\n    // this.loadEmployees = new Date().toString();\n\n    if (!this.passChanged) {\n      this.entity.password = this.currPass;\n    }\n  }\n\n  passChange() {\n    this.passChanged = true;\n  }\n}\n","<div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n  <!-- column -->\n  <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\n    <mat-card>\n      <mat-card-header>\n        <mat-card-title>\n          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n            <!-- column -->\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">\n              {{title}}\n            </div>\n          </div>\n        </mat-card-title>\n        <mat-card-subtitle>\n          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n            <!-- column -->\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">\n              {{subtitle}}\n            </div>\n          </div>\n        </mat-card-subtitle>\n      </mat-card-header>\n      <mat-card-content>\n        <form [formGroup]=\"entityForm\">\n          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">\n              <mat-form-field>\n                <input matInput placeholder=\"Entre usuario\" formControlName=\"name\" [(ngModel)]=\"entity.name\" required>\n                <mat-error *ngIf=\"entityForm.invalid\">{{getErrorMessage('name')}}</mat-error>\n              </mat-form-field>\n            </div>\n          </div>\n          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">\n              <mat-form-field>\n                <input type=\"password\" matInput placeholder=\"Entre password\" formControlName=\"password\"\n                       [(ngModel)]=\"entity.password\" (change)=\"passChange()\" required>\n                <mat-error *ngIf=\"entityForm.invalid\">{{getErrorMessage('password')}}</mat-error>\n              </mat-form-field>\n            </div>\n          </div>\n          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">\n              <mat-form-field>\n                <input matInput placeholder=\"Enter email\" formControlName=\"email\" [(ngModel)]=\"entity.email\">\n                <mat-error *ngIf=\"entityForm.invalid\">{{getErrorMessage('email')}}</mat-error>\n              </mat-form-field>\n            </div>\n          </div>\n          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\" style=\"margin-text-outline: 10px;margin-top: 10px;\">\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">\n              <mat-checkbox [(ngModel)]=\"entity.isActive\" [ngModelOptions]=\"{standalone: true}\"\n                            style=\"margin-right: 10px;\">Esta Activo</mat-checkbox>\n            </div>\n          </div>\n          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\" style=\"margin-text-outline: 10px;margin-top: 10px;\">\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">\n              <mat-checkbox [(ngModel)]=\"entity.isSuperAdmin\" [ngModelOptions]=\"{standalone: true}\"\n                            style=\"margin-right: 10px;\">Es super administrador</mat-checkbox>\n            </div>\n          </div>\n          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\" style=\"margin-text-outline: 10px;margin-top: 10px;\">\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">\n              <mat-form-field>\n                <mat-label>Seleccione menú</mat-label>\n                <mat-select matNativeControl [(ngModel)]=\"entity.defaultMenuId\" [ngModelOptions]=\"{standalone: true}\">\n                  <mat-option *ngFor=\"let option of menus\" [value]=\"option.value\">\n                    {{option.text}}\n                  </mat-option>\n                </mat-select>\n              </mat-form-field>\n            </div>\n          </div>\n        </form>\n      </mat-card-content>\n      <mat-card-actions>\n        <button mat-fab color=\"accent\" [disabled]=\"!entityForm.valid\" (click)=\"save()\">Salvar</button>\n        <button mat-fab color=\"primary\" (click)=\"new()\">Nuevo</button>\n      </mat-card-actions>\n      <mat-card-footer>\n<!--        <mat-tab-group>-->\n<!--          <mat-tab>-->\n<!--            <ng-template mat-tab-label>-->\n<!--              <mat-icon>list</mat-icon>-->\n<!--              Menu-->\n<!--            </ng-template>-->\n<!--            <ng-template matTabContent>-->\n<!--              <div>-->\n<!--                <div>-->\n<!--&lt;!&ndash;                  <app-employees [loadChange]=\"loadEmployees\" [showCardHeader]=\"false\"></app-employees>&ndash;&gt;-->\n<!--                  <app-menu></app-menu>-->\n<!--                </div>-->\n<!--              </div>-->\n<!--            </ng-template>-->\n<!--          </mat-tab>-->\n<!--        </mat-tab-group>-->\n      </mat-card-footer>\n    </mat-card>\n  </div>\n</div>\n\n","import {Component, Input, OnChanges, OnInit} from '@angular/core';\nimport {BaseSearchView} from \"../../baseSearchView\";\nimport {MatTableDataSource} from \"@angular/material/table\";\nimport {ApiService} from \"../../../services/api.service\";\nimport {AuthService} from \"../../../services/security/auth.service\";\nimport {Router} from \"@angular/router\";\n\n@Component({\n  selector: 'app-users',\n  templateUrl: './users.component.html'\n})\nexport class UsersComponent extends BaseSearchView implements OnInit, OnChanges {\n\n  @Input() loadChange: any;\n  @Input() showCardHeader: boolean = true;\n\n  entityApi = 'users';\n  settings: any = {\n    options: {\n      where: {\n      }\n    }\n  };\n\n  title: any;\n  subtitle: any;\n\n  displayedColumns: string[] = ['name', 'isActive', 'actions'];\n  filtersColumns: string[] = ['name'];\n  dataSource: MatTableDataSource<any>;\n\n  number: any;\n  createdDate = new Date();\n\n  filter: any;\n\n  constructor(private service: ApiService,\n              private authService: AuthService,\n              private router: Router) {\n    super();\n  }\n\n  ngOnInit(): void {\n\n    this.title = 'Usuarios';\n    this.subtitle = 'Seguriada';\n\n    super.init(this);\n    super.onPageChange();\n  }\n\n  ngOnChanges(changes: any): void {\n\n    if (this.loadChange) {\n      super.onPageChange();\n    }\n  }\n\n  onEdit(row: any) {\n\n    this.router.navigate(['/user', { userId: row.id }]);\n  }\n\n  // getText(element: any) {\n  //\n  //\n  //   if (element == 'employeeCode') {\n  //     return 'Total';\n  //   }\n  //   else if (element == 'valor') {\n  //\n  //     if (this.dataSource && this.dataSource.data) {\n  //       return this.dataSource.data.reduce((accum, curr) => accum + curr.valor, 0);\n  //     }\n  //     else {\n  //       return '';\n  //     }\n  //   }\n  //   else\n  //   {\n  //     return '';\n  //   }\n  // }\n\n  // beforePageChange(): void {\n  //\n  //   if (this.createdDate) {\n  //\n  //     var datestring = this.createdDate.getDate()  + \"/\" + (this.createdDate.getMonth()+1) + \"/\" + this.createdDate.getFullYear();\n  //     // + \" \" +         this.createdDate.getHours() + \":\" + this.createdDate.getMinutes();\n  //\n  //     this.settings.options.where.createdDate = datestring;\n  //   }\n  //   else {\n  //     delete this.settings.options.where.createdDate;\n  //   }\n  // }\n}\n","<div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n  <!-- column -->\n  <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\n    <mat-card>\n      <mat-card-header *ngIf=\"showCardHeader\">\n        <mat-card-title>\n          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n            <!-- column -->\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">\n              {{title}}\n            </div>\n          </div>\n        </mat-card-title>\n        <mat-card-subtitle>\n          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n            <!-- column -->\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">\n              {{subtitle}}\n            </div>\n          </div>\n        </mat-card-subtitle>\n      </mat-card-header>\n      <mat-card-content>\n\n        <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n          <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" style=\"overflow: hidden;\">\n            <mat-form-field style=\"float: left;width: 30%; margin-right: 10px;\">\n              <input matInput (keyup.enter)=\"onPageChange()\" [(ngModel)]=\"filter\" placeholder=\"Filtrar\">\n            </mat-form-field>\n<!--            <mat-form-field style=\"width: 30%; margin-right: 10px;\">-->\n<!--              <mat-label>Seleccione fecha</mat-label>-->\n<!--              <input matInput [matDatepicker]=\"picker\" [(ngModel)]=\"createdDate\">-->\n<!--              <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>-->\n<!--              <mat-datepicker #picker></mat-datepicker>-->\n<!--            </mat-form-field>-->\n          </div>\n        </div>\n        <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n          <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" style=\"overflow: hidden;\">\n            <button mat-fab color=\"basic\"  (click)=\"onPageChange()\" style=\"float: left;\">Refrescar</button>\n          </div>\n        </div>\n\n        <table mat-table [dataSource]=\"dataSource\" matSort (matSortChange)=\"onSortChange($event)\" class=\"mat-elevation-z8\">\n\n          <!-- id Column -->\n          <ng-container matColumnDef=\"id\">\n            <th mat-header-cell *matHeaderCellDef> Id </th>\n            <td mat-cell *matCellDef=\"let element\"> {{element.id}} </td>\n          </ng-container>\n\n          <ng-container [matColumnDef]=\"column\" *ngFor=\"let column of displayedColumns\">\n            <th mat-header-cell *matHeaderCellDef> {{column}} </th>\n            <td mat-cell *matCellDef=\"let element\">\n              <span>{{element[column]}}</span>\n              <button *ngIf=\"column === 'actions'\" mat-button (click)=\"onEdit(element)\"><mat-icon>launch</mat-icon></button>\n              <button *ngIf=\"column === 'actions'\" mat-button color=\"warn\" (click)=\"onDelete(element)\"><mat-icon>delete_outline</mat-icon></button>\n            </td>\n          </ng-container>\n\n          <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n          <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n        </table>\n        <mat-paginator [length]=\"length\" [pageSize]=\"pageSize\" [pageSizeOptions]=\"pageSizeOptions\"\n                       (page)=\"onPaginatorChange($event)\" showFirstLastButtons>\n        </mat-paginator>\n      </mat-card-content>\n    </mat-card>\n  </div>\n</div>\n\n"],"sourceRoot":"webpack:///"}