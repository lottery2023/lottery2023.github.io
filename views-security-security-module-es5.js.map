{"version":3,"sources":["webpack:///src/app/views/security/menu/menu.component.ts","webpack:///src/app/views/security/menu/menu.component.html","webpack:///src/app/views/security/security-routing.module.ts","webpack:///src/app/views/security/security.module.ts","webpack:///src/app/views/security/user/user.component.ts","webpack:///src/app/views/security/user/user.component.html","webpack:///src/app/views/security/users/users.component.ts","webpack:///src/app/views/security/users/users.component.html"],"names":["TodoItemFlatNode","MenuComponent","service","authService","route","fb","router","changeDetectorRef","_snackBar","entityApi","items","name","icon","children","state","expandable","level","checks","_transformer","node","length","treeControl","treeFlattener","dataSource","hasChild","_","checklistSelection","check","configFormGroup","entityId","setting","field","options","where","id","$ne","entityForm","getLevel","title","subtitle","iniEntity","params","subscribe","userId","data","isSelected","todoLeafItemSelectionToggle","entity","employeeId","password","email","isActive","isSuperAdmin","loadEmployees","Date","toString","descendants","getDescendants","descAllSelected","every","child","result","some","descendantsAllSelected","toggle","select","deselect","forEach","checkAllParentsSelection","parent","getParentNode","checkRootNodeSelection","nodeSelected","currentLevel","startIndex","dataNodes","indexOf","i","currentNode","selector","templateUrl","routes","path","canActivate","component","SecurityRoutingModule","forChild","imports","exports","SecurityModule","declarations","UserComponent","entityApiMenus","passChanged","required","takenValidator","getSelect","value","text","order","res","menus","include","association","defaultMenuId","navigate","done","currPass","passChange","save","UsersComponent","showCardHeader","settings","displayedColumns","filtersColumns","createdDate","changes","loadChange","row","onPageChange","onSortChange","onPaginatorChange"],"mappings":"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","file":"views-security-security-module-es5.js","sourcesContent":["import {ChangeDetectorRef, Component, OnInit} from '@angular/core';\nimport {BaseEditView} from \"../../baseEditView\";\nimport {FormBuilder, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {ApiService} from \"../../../services/api.service\";\nimport {AuthService} from \"../../../services/security/auth.service\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\nimport {FlatTreeControl} from \"@angular/cdk/tree\";\nimport {MatTreeFlatDataSource, MatTreeFlattener} from \"@angular/material/tree\";\nimport {SelectionModel} from \"@angular/cdk/collections\";\n\n/** Flat to-do item node with expandable and level information */\nexport class TodoItemFlatNode {\n  item: string;\n  level: number;\n  expandable: boolean;\n}\n\n@Component({\n  selector: 'app-menu',\n  templateUrl: './menu.component.html'\n})\nexport class MenuComponent extends BaseEditView implements OnInit {\n\n  entityApi = 'users';\n  title: any;\n  subtitle: any;\n  entity: any;\n\n  entityForm: FormGroup;\n\n  loadEmployees: string;\n\n  items = [\n    {\n      name: 'Apuesta', icon: 'business',\n      children: [\n        { state: 'betalerts', name: 'Apuestas alertas', icon: 'fiber_manual_record', expandable: false, level: 1, checks: true },\n        { state: 'bet', name: 'Apuesta', icon: 'fiber_manual_record' },\n        { state: 'bet2', name: 'Apuesta-PRUEBA', icon: 'fiber_manual_record' },\n        { state: 'bets', name: 'Buscador', icon: 'fiber_manual_record' },\n        { state: 'forbidden', name: 'Numero Prohibido', icon: 'fiber_manual_record' }\n      ]\n    },\n    {\n      name: 'Recursos Humanos', icon: 'group',\n      children: [\n        { state: 'employee', name: 'Empleado', icon: 'fiber_manual_record' },\n        { state: 'lottery', name: 'Loterias', icon: 'fiber_manual_record' },\n        { state: 'employeealerts', name: 'Empleados Alerta ', icon: 'fiber_manual_record' },\n      ]\n    },\n    {\n      name: 'Finanzas', icon: 'attach_money',\n      children: [\n        { state: 'sales', name: 'Ventas', icon: 'fiber_manual_record' },\n      ]\n    },\n    {\n      name: 'Análisis', icon: 'poll',\n      children: [\n        { state: 'employeesWork', name: 'Digitación', icon: 'fiber_manual_record' },\n      ]\n    },\n    {\n      name: 'Seguridad', icon: 'verified_user',\n      children: [\n        { state: 'user', name: 'Usuario', icon: 'fiber_manual_record' },\n        { state: 'users', name: 'Usuarios', icon: 'fiber_manual_record' }\n      ]\n    }\n  ]\n\n  private _transformer = (node: any, level: number) => {\n    return {\n      expandable: !!node.children && node.children.length > 0,\n      name: node.name,\n      state: node.state,\n      icon: node.icon,\n      level: level,\n    };\n  };\n\n  treeControl = new FlatTreeControl<any>(\n    node => node.level, node => node.expandable);\n\n  treeFlattener = new MatTreeFlattener(\n    this._transformer, node => node.level, node => node.expandable, node => node.children);\n\n  dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n  hasChild = (_: number, node: any) => node.expandable;\n\n  /** The selection for checklist */\n  checklistSelection = new SelectionModel<any>(true /* multiple */);\n\n  check = true;\n  constructor(private service: ApiService,\n              private authService: AuthService,\n              private route: ActivatedRoute,\n              private fb: FormBuilder,\n              private router: Router,\n              private changeDetectorRef: ChangeDetectorRef,\n              private _snackBar: MatSnackBar) {\n    super();\n  }\n\n  ngOnInit(): void {\n\n    this.title = 'Menu'; //+ this.service.getUrl();\n    this.subtitle = 'Seguridad';\n\n    this.iniEntity();\n\n    super.init(this);\n\n    this.route.params.subscribe((params) => {\n\n      if (params && params.userId) {\n\n        this.configFormGroup(params.userId);\n\n        super.getEntity(params.userId).subscribe(() => {\n\n        });\n      }\n      else {\n        this.configFormGroup();\n      }\n    });\n\n    this.dataSource.data = this.items;\n\n    debugger;\n    // this.checklistSelection.toggle(this.items[0].children[0]);\n    this.checklistSelection.isSelected(this.items[0].children[0])\n    this.todoLeafItemSelectionToggle(this.items[0].children[0])\n  }\n\n  configFormGroup = (entityId?:any) => {\n\n    let setting: any = {field: 'name'}\n\n    if (entityId) {\n\n      setting.options = {\n        where: {\n          id: { $ne: entityId }\n        }\n      }\n    }\n\n    this.entityForm = new FormGroup({\n      // name: new FormControl('', [Validators.required],\n      //   [this.service.takenValidator(this.entityApi, setting)]),\n      // password: new FormControl('', [Validators.required]),\n      // email: new FormControl('', [Validators.email])\n      // isActive: new FormControl('', [Validators.required]),\n      // isSuperAdmin: new FormControl('', [Validators.required])\n    });\n  }\n\n  iniEntity(): void {\n    this.entity = {\n      employeeId: null,\n      name: null,\n      password: null,\n      email: null,\n      isActive: true,\n      isSuperAdmin: false\n    };\n  }\n\n  new(): void {\n\n    this.iniEntity();\n\n    // this.router.navigate(['/user']);\n  }\n\n  afterSaved(): void {\n    this.loadEmployees = new Date().toString();\n  }\n\n  getLevel = (node: TodoItemFlatNode) => node.level;\n\n  /** Whether all the descendants of the node are selected. */\n  descendantsAllSelected(node: TodoItemFlatNode): boolean {\n    const descendants = this.treeControl.getDescendants(node);\n    const descAllSelected = descendants.length > 0 && descendants.every(child => {\n      return this.checklistSelection.isSelected(child);\n    });\n    return descAllSelected;\n  }\n\n  /** Whether part of the descendants are selected */\n  descendantsPartiallySelected(node: TodoItemFlatNode): boolean {\n    const descendants = this.treeControl.getDescendants(node);\n    const result = descendants.some(child => this.checklistSelection.isSelected(child));\n    return result && !this.descendantsAllSelected(node);\n  }\n\n  /** Toggle the to-do item selection. Select/deselect all the descendants node */\n  todoItemSelectionToggle(node: TodoItemFlatNode): void {\n    debugger;\n    this.checklistSelection.toggle(node);\n    const descendants = this.treeControl.getDescendants(node);\n    this.checklistSelection.isSelected(node)\n      ? this.checklistSelection.select(...descendants)\n      : this.checklistSelection.deselect(...descendants);\n\n    // Force update for the parent\n    descendants.forEach(child => this.checklistSelection.isSelected(child));\n    this.checkAllParentsSelection(node);\n  }\n\n  /** Toggle a leaf to-do item selection. Check all the parents to see if they changed */\n  todoLeafItemSelectionToggle(node: any): void {\n    debugger;\n    this.checklistSelection.toggle(node);\n    this.checkAllParentsSelection(node);\n  }\n\n  /* Checks all the parents when a leaf node is selected/unselected */\n  checkAllParentsSelection(node: TodoItemFlatNode): void {\n    let parent: TodoItemFlatNode | null = this.getParentNode(node);\n    while (parent) {\n      this.checkRootNodeSelection(parent);\n      parent = this.getParentNode(parent);\n    }\n  }\n\n  /** Check root node checked state and change it accordingly */\n  checkRootNodeSelection(node: TodoItemFlatNode): void {\n    const nodeSelected = this.checklistSelection.isSelected(node);\n    const descendants = this.treeControl.getDescendants(node);\n    const descAllSelected = descendants.length > 0 && descendants.every(child => {\n      return this.checklistSelection.isSelected(child);\n    });\n    if (nodeSelected && !descAllSelected) {\n      this.checklistSelection.deselect(node);\n    } else if (!nodeSelected && descAllSelected) {\n      this.checklistSelection.select(node);\n    }\n  }\n\n  /* Get the parent node of a node */\n  getParentNode(node: TodoItemFlatNode): TodoItemFlatNode | null {\n    const currentLevel = this.getLevel(node);\n\n    if (currentLevel < 1) {\n      return null;\n    }\n\n    const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;\n\n    for (let i = startIndex; i >= 0; i--) {\n      const currentNode = this.treeControl.dataNodes[i];\n\n      if (this.getLevel(currentNode) < currentLevel) {\n        return currentNode;\n      }\n    }\n    return null;\n  }\n\n}\n","<div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n  <!-- column -->\n  <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\n    <mat-card>\n      <mat-card-header>\n        <mat-card-title>\n          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n            <!-- column -->\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">\n              {{title}}\n            </div>\n          </div>\n        </mat-card-title>\n        <mat-card-subtitle>\n          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n            <!-- column -->\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">\n              {{subtitle}}\n            </div>\n          </div>\n        </mat-card-subtitle>\n      </mat-card-header>\n      <mat-card-content>\n        <form [formGroup]=\"entityForm\">\n<!--          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">-->\n<!--            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">-->\n<!--              <mat-form-field>-->\n<!--                <input matInput placeholder=\"Entre usuario\" formControlName=\"name\" [(ngModel)]=\"entity.name\" required>-->\n<!--                <mat-error *ngIf=\"entityForm.invalid\">{{getErrorMessage('name')}}</mat-error>-->\n<!--              </mat-form-field>-->\n<!--            </div>-->\n<!--          </div>-->\n<!--          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">-->\n<!--            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">-->\n<!--              <mat-form-field>-->\n<!--                <input matInput placeholder=\"Entre password\" formControlName=\"password\" [(ngModel)]=\"entity.password\" required>-->\n<!--                <mat-error *ngIf=\"entityForm.invalid\">{{getErrorMessage('password')}}</mat-error>-->\n<!--              </mat-form-field>-->\n<!--            </div>-->\n<!--          </div>-->\n<!--          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">-->\n<!--            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">-->\n<!--              <mat-form-field>-->\n<!--                <input matInput placeholder=\"Enter email\" formControlName=\"email\" [(ngModel)]=\"entity.email\">-->\n<!--                <mat-error *ngIf=\"entityForm.invalid\">{{getErrorMessage('email')}}</mat-error>-->\n<!--              </mat-form-field>-->\n<!--            </div>-->\n<!--          </div>-->\n          <!--          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">-->\n          <!--            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">-->\n          <!--              <mat-form-field>-->\n          <!--                <input matInput placeholder=\"Entre Apellido\" formControlName=\"lastName\" [(ngModel)]=\"entity.lastName\" required>-->\n          <!--                <mat-error *ngIf=\"entityForm.invalid\">{{getErrorMessage('lastName')}}</mat-error>-->\n          <!--              </mat-form-field>-->\n          <!--            </div>-->\n          <!--          </div>-->\n<!--          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\" style=\"margin-text-outline: 10px;margin-top: 10px;\">-->\n<!--            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">-->\n<!--              <mat-checkbox [(ngModel)]=\"entity.isActive\" [ngModelOptions]=\"{standalone: true}\"-->\n<!--                            style=\"margin-right: 10px;\">Esta Activo</mat-checkbox>-->\n<!--            </div>-->\n<!--          </div>-->\n<!--          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\" style=\"margin-text-outline: 10px;margin-top: 10px;\">-->\n<!--            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">-->\n<!--              <mat-checkbox [(ngModel)]=\"entity.isSuperAdmin\" [ngModelOptions]=\"{standalone: true}\"-->\n<!--                            style=\"margin-right: 10px;\">Es super administrador</mat-checkbox>-->\n<!--            </div>-->\n<!--          </div>-->\n        </form>\n        <mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n          <!-- This is the tree node template for leaf nodes -->\n          <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding>\n            <!-- use a disabled button to provide padding for tree leaf -->\n            <button mat-icon-button disabled><mat-icon>{{ node.icon }}</mat-icon></button>\n            {{node.name + node.checks}}\n            <mat-checkbox class=\"checklist-leaf-node\"\n                          [(ngModel)]=\"node.state\"\n                          [checked]=\"checklistSelection.isSelected(node)\"\n                          (change)=\"todoLeafItemSelectionToggle(node)\"\n            >\n            </mat-checkbox>\n            <mat-nav-list appAccordion>\n              <!--      <mat-list-item appAccordionLink routerLinkActive=\"selected\" group=\"{{node.state}}\">-->\n              <mat-list-item appAccordionLink>\n<!--                (click)=\"routerLink(node)\"-->\n                <a appAccordionToggle >\n                  <span>{{ node.name }}</span>\n                </a>\n              </mat-list-item>\n            </mat-nav-list>\n          </mat-tree-node>\n\n\n          <!-- This is the tree node template for expandable nodes -->\n          <mat-tree-node *matTreeNodeDef=\"let node;when: hasChild\" matTreeNodePadding>\n            <button mat-icon-button matTreeNodeToggle [attr.aria-label]=\"'toggle ' + node.name\">\n              <mat-icon>{{ node.icon }}</mat-icon>\n            </button>\n\n\n            <mat-checkbox class=\"checklist-leaf-node\"\n                          [(ngModel)]=\"node.state\"\n                          [checked]=\"descendantsAllSelected(node)\"\n                          [indeterminate]=\"descendantsPartiallySelected(node)\"\n                          (change)=\"todoItemSelectionToggle(node)\"\n            >\n<!--              {{node.item}}-->\n            </mat-checkbox>\n\n            <span mat-icon-button matTreeNodeToggle\n                  [attr.aria-label]=\"'toggle ' + node.name\"\n                  style=\"cursor: pointer\"\n            >\n              {{ node.name }}\n            </span>\n\n            <button mat-icon-button matTreeNodeToggle\n                    [attr.aria-label]=\"'toggle ' + node.name\">\n              <mat-icon>\n                {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n              </mat-icon>\n            </button>\n          </mat-tree-node>\n        </mat-tree>\n      </mat-card-content>\n      <mat-card-actions>\n        <!--        <button mat-fab color=\"accent\" [disabled]=\"!entityForm.valid\" (click)=\"save()\">Salvar</button>-->\n        <!--        <button mat-fab color=\"primary\" (click)=\"new()\">Nuevo</button>-->\n      </mat-card-actions>\n      <mat-card-footer>\n<!--        <mat-tab-group>-->\n<!--          <mat-tab>-->\n<!--            <ng-template mat-tab-label>-->\n<!--              <mat-icon>list</mat-icon>-->\n<!--              Menu-->\n<!--            </ng-template>-->\n<!--            <ng-template matTabContent>-->\n<!--              <div>-->\n<!--                <div>-->\n<!--                  &lt;!&ndash;                  <app-employees [loadChange]=\"loadEmployees\" [showCardHeader]=\"false\"></app-employees>&ndash;&gt;-->\n<!--                  <app-menu></app-menu>-->\n<!--                </div>-->\n<!--              </div>-->\n<!--            </ng-template>-->\n<!--          </mat-tab>-->\n<!--        </mat-tab-group>-->\n      </mat-card-footer>\n    </mat-card>\n  </div>\n</div>\n\n\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport {AuthGuard} from \"../../services/security/auth.guard\";\nimport {UsersComponent} from \"./users/users.component\";\nimport {UserComponent} from \"./user/user.component\";\n\nconst routes: Routes = [\n  {\n    path: 'users',\n    canActivate: [AuthGuard],\n    component: UsersComponent\n  },\n  {\n    path: 'user',\n    canActivate: [AuthGuard],\n    component: UserComponent\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class SecurityRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {DemoMaterialModule} from \"../../demo-material-module\";\n\nimport { SecurityRoutingModule } from './security-routing.module';\nimport { UsersComponent } from './users/users.component';\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport { UserComponent } from './user/user.component';\nimport { MenuComponent } from './menu/menu.component';\n\n\n@NgModule({\n  declarations: [UsersComponent, UserComponent, MenuComponent],\n  imports: [\n    CommonModule,\n    SecurityRoutingModule,\n    DemoMaterialModule,\n    ReactiveFormsModule,\n    FormsModule\n  ]\n})\nexport class SecurityModule { }\n","import {ChangeDetectorRef, Component, OnInit} from '@angular/core';\nimport {BaseEditView} from \"../../baseEditView\";\nimport {FormBuilder, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {ApiService} from \"../../../services/api.service\";\nimport {AuthService} from \"../../../services/security/auth.service\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\n\n@Component({\n  selector: 'app-user',\n  templateUrl: './user.component.html'\n})\nexport class UserComponent extends BaseEditView implements OnInit {\n\n  entityApi = 'users';\n  entityApiMenus = 'menus'\n  title: any;\n  subtitle: any;\n  entity: any;\n\n  entityForm: FormGroup;\n\n  loadEmployees: string;\n  currPass: string;\n  passChanged = false;\n\n  menus: any;\n\n  constructor(private service: ApiService,\n              private authService: AuthService,\n              private route: ActivatedRoute,\n              private fb: FormBuilder,\n              private router: Router,\n              private changeDetectorRef: ChangeDetectorRef,\n              private _snackBar: MatSnackBar) {\n    super();\n  }\n\n  ngOnInit(): void {\n\n    this.title = 'User'; //+ this.service.getUrl();\n    this.subtitle = 'Seguridad';\n\n    this.iniEntity();\n\n    super.init(this);\n\n    this.service.getSelect(this.entityApiMenus, {value: 'id', text: 'name', options: {order:[['name', 'asc']]}})\n      .subscribe((res: any) => {\n        this.menus = res;\n      });\n\n    this.route.params.subscribe((params) => {\n\n      if (params && params.userId) {\n\n        this.configFormGroup(params.userId);\n\n        super.getEntity(params.userId, {options: {include: [{association: 'menus'}]}}).subscribe(() => {\n\n          debugger;\n          this.entity;\n        });\n      }\n      else {\n        this.configFormGroup();\n      }\n    });\n\n  }\n\n  configFormGroup = (entityId?:any) => {\n\n    let setting: any = {field: 'name'}\n\n    if (entityId) {\n\n      setting.options = {\n        where: {\n          id: { $ne: entityId }\n        }\n      }\n    }\n\n    this.entityForm = new FormGroup({\n      name: new FormControl('', [Validators.required],\n        [this.service.takenValidator(this.entityApi, setting)]),\n      password: new FormControl('', [Validators.required]),\n      email: new FormControl('', [Validators.email]),\n      // isActive: new FormControl('', [Validators.required]),\n      // isSuperAdmin: new FormControl('', [Validators.required]),\n      // menuId: new FormControl('', [Validators.required])\n    });\n  }\n\n  iniEntity(): void {\n    this.entity = {\n      employeeId: null,\n      defaultMenuId: null,\n      name: null,\n      password: null,\n      email: null,\n      isActive: true,\n      isSuperAdmin: false,\n    };\n  }\n\n  new(): void {\n\n    this.iniEntity();\n\n    this.router.navigate(['/user']);\n  }\n\n  beforeSaved(): boolean {\n    let done = true;\n\n    if (this.entity.id) {\n\n      if (!this.passChanged) {\n        this.currPass = this.entity.password;\n        delete this.entity.password;\n      }\n    }\n\n    return done;\n  }\n\n  afterSaved(): void {\n    // this.loadEmployees = new Date().toString();\n\n    if (!this.passChanged) {\n      this.entity.password = this.currPass;\n    }\n  }\n\n  passChange() {\n    this.passChanged = true;\n  }\n}\n","<div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n  <!-- column -->\n  <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\n    <mat-card>\n      <mat-card-header>\n        <mat-card-title>\n          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n            <!-- column -->\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">\n              {{title}}\n            </div>\n          </div>\n        </mat-card-title>\n        <mat-card-subtitle>\n          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n            <!-- column -->\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">\n              {{subtitle}}\n            </div>\n          </div>\n        </mat-card-subtitle>\n      </mat-card-header>\n      <mat-card-content>\n        <form [formGroup]=\"entityForm\">\n          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">\n              <mat-form-field>\n                <input matInput placeholder=\"Entre usuario\" formControlName=\"name\" [(ngModel)]=\"entity.name\" required>\n                <mat-error *ngIf=\"entityForm.invalid\">{{getErrorMessage('name')}}</mat-error>\n              </mat-form-field>\n            </div>\n          </div>\n          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">\n              <mat-form-field>\n                <input type=\"password\" matInput placeholder=\"Entre password\" formControlName=\"password\"\n                       [(ngModel)]=\"entity.password\" (change)=\"passChange()\" required>\n                <mat-error *ngIf=\"entityForm.invalid\">{{getErrorMessage('password')}}</mat-error>\n              </mat-form-field>\n            </div>\n          </div>\n          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">\n              <mat-form-field>\n                <input matInput placeholder=\"Enter email\" formControlName=\"email\" [(ngModel)]=\"entity.email\">\n                <mat-error *ngIf=\"entityForm.invalid\">{{getErrorMessage('email')}}</mat-error>\n              </mat-form-field>\n            </div>\n          </div>\n          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\" style=\"margin-text-outline: 10px;margin-top: 10px;\">\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">\n              <mat-checkbox [(ngModel)]=\"entity.isActive\" [ngModelOptions]=\"{standalone: true}\"\n                            style=\"margin-right: 10px;\">Esta Activo</mat-checkbox>\n            </div>\n          </div>\n          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\" style=\"margin-text-outline: 10px;margin-top: 10px;\">\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">\n              <mat-checkbox [(ngModel)]=\"entity.isSuperAdmin\" [ngModelOptions]=\"{standalone: true}\"\n                            style=\"margin-right: 10px;\">Es super administrador</mat-checkbox>\n            </div>\n          </div>\n          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\" style=\"margin-text-outline: 10px;margin-top: 10px;\">\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">\n              <mat-form-field>\n                <mat-label>Seleccione menú</mat-label>\n                <mat-select matNativeControl [(ngModel)]=\"entity.defaultMenuId\" [ngModelOptions]=\"{standalone: true}\">\n                  <mat-option *ngFor=\"let option of menus\" [value]=\"option.value\">\n                    {{option.text}}\n                  </mat-option>\n                </mat-select>\n              </mat-form-field>\n            </div>\n          </div>\n        </form>\n      </mat-card-content>\n      <mat-card-actions>\n        <button mat-fab color=\"accent\" [disabled]=\"!entityForm.valid\" (click)=\"save()\">Salvar</button>\n        <button mat-fab color=\"primary\" (click)=\"new()\">Nuevo</button>\n      </mat-card-actions>\n      <mat-card-footer>\n<!--        <mat-tab-group>-->\n<!--          <mat-tab>-->\n<!--            <ng-template mat-tab-label>-->\n<!--              <mat-icon>list</mat-icon>-->\n<!--              Menu-->\n<!--            </ng-template>-->\n<!--            <ng-template matTabContent>-->\n<!--              <div>-->\n<!--                <div>-->\n<!--&lt;!&ndash;                  <app-employees [loadChange]=\"loadEmployees\" [showCardHeader]=\"false\"></app-employees>&ndash;&gt;-->\n<!--                  <app-menu></app-menu>-->\n<!--                </div>-->\n<!--              </div>-->\n<!--            </ng-template>-->\n<!--          </mat-tab>-->\n<!--        </mat-tab-group>-->\n      </mat-card-footer>\n    </mat-card>\n  </div>\n</div>\n\n","import {Component, Input, OnChanges, OnInit} from '@angular/core';\nimport {BaseSearchView} from \"../../baseSearchView\";\nimport {MatTableDataSource} from \"@angular/material/table\";\nimport {ApiService} from \"../../../services/api.service\";\nimport {AuthService} from \"../../../services/security/auth.service\";\nimport {Router} from \"@angular/router\";\n\n@Component({\n  selector: 'app-users',\n  templateUrl: './users.component.html'\n})\nexport class UsersComponent extends BaseSearchView implements OnInit, OnChanges {\n\n  @Input() loadChange: any;\n  @Input() showCardHeader: boolean = true;\n\n  entityApi = 'users';\n  settings: any = {\n    options: {\n      where: {\n      }\n    }\n  };\n\n  title: any;\n  subtitle: any;\n\n  displayedColumns: string[] = ['name', 'isActive', 'actions'];\n  filtersColumns: string[] = ['name'];\n  dataSource: MatTableDataSource<any>;\n\n  number: any;\n  createdDate = new Date();\n\n  filter: any;\n\n  constructor(private service: ApiService,\n              private authService: AuthService,\n              private router: Router) {\n    super();\n  }\n\n  ngOnInit(): void {\n\n    this.title = 'Usuarios';\n    this.subtitle = 'Seguriada';\n\n    super.init(this);\n    super.onPageChange();\n  }\n\n  ngOnChanges(changes: any): void {\n\n    if (this.loadChange) {\n      super.onPageChange();\n    }\n  }\n\n  onEdit(row: any) {\n\n    this.router.navigate(['/user', { userId: row.id }]);\n  }\n\n  // getText(element: any) {\n  //\n  //\n  //   if (element == 'employeeCode') {\n  //     return 'Total';\n  //   }\n  //   else if (element == 'valor') {\n  //\n  //     if (this.dataSource && this.dataSource.data) {\n  //       return this.dataSource.data.reduce((accum, curr) => accum + curr.valor, 0);\n  //     }\n  //     else {\n  //       return '';\n  //     }\n  //   }\n  //   else\n  //   {\n  //     return '';\n  //   }\n  // }\n\n  // beforePageChange(): void {\n  //\n  //   if (this.createdDate) {\n  //\n  //     var datestring = this.createdDate.getDate()  + \"/\" + (this.createdDate.getMonth()+1) + \"/\" + this.createdDate.getFullYear();\n  //     // + \" \" +         this.createdDate.getHours() + \":\" + this.createdDate.getMinutes();\n  //\n  //     this.settings.options.where.createdDate = datestring;\n  //   }\n  //   else {\n  //     delete this.settings.options.where.createdDate;\n  //   }\n  // }\n}\n","<div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n  <!-- column -->\n  <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\n    <mat-card>\n      <mat-card-header *ngIf=\"showCardHeader\">\n        <mat-card-title>\n          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n            <!-- column -->\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">\n              {{title}}\n            </div>\n          </div>\n        </mat-card-title>\n        <mat-card-subtitle>\n          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n            <!-- column -->\n            <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\">\n              {{subtitle}}\n            </div>\n          </div>\n        </mat-card-subtitle>\n      </mat-card-header>\n      <mat-card-content>\n\n        <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n          <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" style=\"overflow: hidden;\">\n            <mat-form-field style=\"float: left;width: 30%; margin-right: 10px;\">\n              <input matInput (keyup.enter)=\"onPageChange()\" [(ngModel)]=\"filter\" placeholder=\"Filtrar\">\n            </mat-form-field>\n<!--            <mat-form-field style=\"width: 30%; margin-right: 10px;\">-->\n<!--              <mat-label>Seleccione fecha</mat-label>-->\n<!--              <input matInput [matDatepicker]=\"picker\" [(ngModel)]=\"createdDate\">-->\n<!--              <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>-->\n<!--              <mat-datepicker #picker></mat-datepicker>-->\n<!--            </mat-form-field>-->\n          </div>\n        </div>\n        <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n          <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" style=\"overflow: hidden;\">\n            <button mat-fab color=\"basic\"  (click)=\"onPageChange()\" style=\"float: left;\">Refrescar</button>\n          </div>\n        </div>\n\n        <table mat-table [dataSource]=\"dataSource\" matSort (matSortChange)=\"onSortChange($event)\" class=\"mat-elevation-z8\">\n\n          <!-- id Column -->\n          <ng-container matColumnDef=\"id\">\n            <th mat-header-cell *matHeaderCellDef> Id </th>\n            <td mat-cell *matCellDef=\"let element\"> {{element.id}} </td>\n          </ng-container>\n\n          <ng-container [matColumnDef]=\"column\" *ngFor=\"let column of displayedColumns\">\n            <th mat-header-cell *matHeaderCellDef> {{column}} </th>\n            <td mat-cell *matCellDef=\"let element\">\n              <span>{{element[column]}}</span>\n              <button *ngIf=\"column === 'actions'\" mat-button (click)=\"onEdit(element)\"><mat-icon>launch</mat-icon></button>\n              <button *ngIf=\"column === 'actions'\" mat-button color=\"warn\" (click)=\"onDelete(element)\"><mat-icon>delete_outline</mat-icon></button>\n            </td>\n          </ng-container>\n\n          <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n          <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n        </table>\n        <mat-paginator [length]=\"length\" [pageSize]=\"pageSize\" [pageSizeOptions]=\"pageSizeOptions\"\n                       (page)=\"onPaginatorChange($event)\" showFirstLastButtons>\n        </mat-paginator>\n      </mat-card-content>\n    </mat-card>\n  </div>\n</div>\n\n"]}